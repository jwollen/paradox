@*
// Copyright (c) 2010-2013 SharpDoc - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this template to modify the generated html footer for all body
// -------------------------------------------------------------------------------
*@
@model SharpDoc.TemplateContext
@using System.Web
@using SharpDoc.Model
@Import("PageHeadScriptLink")
@helper Dump(string title) {
	<title>
    @Raw(@"
        <%
            // Generate a proper title, using index.txt
            var page = Request.QueryString[""page""] != null ? HttpUtility.UrlEncode(Request.QueryString[""page""]) : ""main"";
            if (page != null)
            {
                string line;
                var searchPattern = page + "".htm|"";
                string title = ""Paradox Documentation"";

                // Read the file and display it line by line.
                using (System.IO.StreamReader file = new System.IO.StreamReader(Server.MapPath(""index.txt"")))
                {
                    while ((line = file.ReadLine()) != null)
                    {
                        if (line.StartsWith(searchPattern))
                        {
                            // Extract second parameter
                            var splittedLine = line.Split('|');
                            if (splittedLine.Length >= 2)
                                title = splittedLine[1];
                            break;
                        }
                    }
                }

                // Index means we can use existing name as is
                if (title == ""index"")
                {
                    title = Request.QueryString[""page""];
                }
                
                Response.Write(title + "" - Paradox Documentation"");
            }
            else
            {
                Response.Write(""Paradox Documentation"");
            }
        %>")
    </title>
    @Helpers.PageHeadScriptLink.Dump()
}

