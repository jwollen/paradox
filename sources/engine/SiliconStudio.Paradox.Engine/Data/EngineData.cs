// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Paradox Data Code Generator.
// To generate it yourself, please install SiliconStudio.Paradox.VisualStudio.Package .vsix
// and re-save the associated .pdxdata.
// </auto-generated>

namespace SiliconStudio.Paradox.Engine.Data
{
    /// <summary>
    /// Module initializer for data types of assembly SiliconStudio.Paradox.Engine.
    /// </summary>
    class DataInitializer
    {
        [SiliconStudio.Core.ModuleInitializer]
        internal static void Initialize()
        {
            // Register type LightingConfigurationData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Effects.Data.LightingConfigurationDataConverter());
            // Register type LightingConfigurationsSetData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Effects.Data.LightingConfigurationsSetDataConverter());
            // Register type MaterialData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Effects.Data.MaterialDataConverter());
            // Register type MeshDrawData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Effects.Data.MeshDrawDataConverter());
            // Register type MeshData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Effects.Data.MeshDataConverter());
            // Register type ModelData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Effects.Data.ModelDataConverter());
            // Register type SceneData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Effects.Data.SceneDataConverter());
            // Register type ShadowConfigurationData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Effects.Data.ShadowConfigurationDataConverter());
            // Register type ShadowConfigurationArrayData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Effects.Data.ShadowConfigurationArrayDataConverter());
            // Register type EntityComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.EntityModel.Data.EntityComponentDataConverter());
            // Register entity component reference for type EntityComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Data.EntityComponentReferenceDataConverter<SiliconStudio.Paradox.EntityModel.EntityComponent>());
            // Register type ModelNodeLinkComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentDataConverter());
            // Register entity component reference for type ModelNodeLinkComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Data.EntityComponentReferenceDataConverter<SiliconStudio.Paradox.Engine.ModelNodeLinkComponent>());
            // Register type SpriteComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Engine.Data.SpriteComponentDataConverter());
            // Register entity component reference for type SpriteComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Data.EntityComponentReferenceDataConverter<SiliconStudio.Paradox.Engine.SpriteComponent>());
            // Register type CameraComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Engine.Data.CameraComponentDataConverter());
            // Register entity component reference for type CameraComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Data.EntityComponentReferenceDataConverter<SiliconStudio.Paradox.Engine.CameraComponent>());
            // Register type LightComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Engine.Data.LightComponentDataConverter());
            // Register entity component reference for type LightComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Data.EntityComponentReferenceDataConverter<SiliconStudio.Paradox.Engine.LightComponent>());
            // Register type LightShaftsComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Engine.Data.LightShaftsComponentDataConverter());
            // Register entity component reference for type LightShaftsComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Data.EntityComponentReferenceDataConverter<SiliconStudio.Paradox.Engine.LightShaftsComponent>());
            // Register type EntityGroupData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.EntityModel.Data.EntityGroupDataConverter());
            // Register type AnimationComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Engine.Data.AnimationComponentDataConverter());
            // Register entity component reference for type AnimationComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Data.EntityComponentReferenceDataConverter<SiliconStudio.Paradox.Engine.AnimationComponent>());
            // Register type ModelComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Engine.Data.ModelComponentDataConverter());
            // Register entity component reference for type ModelComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Data.EntityComponentReferenceDataConverter<SiliconStudio.Paradox.Engine.ModelComponent>());
            // Register type TransformationComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Engine.Data.TransformationComponentDataConverter());
            // Register entity component reference for type TransformationComponentData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.Data.EntityComponentReferenceDataConverter<SiliconStudio.Paradox.Engine.TransformationComponent>());
            // Register type EntityData
            SiliconStudio.Core.Serialization.Converters.ConverterContext.RegisterConverter(new SiliconStudio.Paradox.EntityModel.Data.EntityDataConverter());
        }
    }
}

namespace SiliconStudio.Paradox.Effects.Data
{
    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Effects.LightingConfiguration"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("LightingConfigurationData")]
    public partial class LightingConfigurationData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.LightingConfiguration.MaxNumDirectionalLight"/>.
        /// </summary>
        public System.Int32 MaxNumDirectionalLight;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.LightingConfiguration.MaxNumPointLight"/>.
        /// </summary>
        public System.Int32 MaxNumPointLight;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.LightingConfiguration.MaxNumSpotLight"/>.
        /// </summary>
        public System.Int32 MaxNumSpotLight;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.LightingConfiguration.UnrollDirectionalLightLoop"/>.
        /// </summary>
        public System.Boolean UnrollDirectionalLightLoop;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.LightingConfiguration.UnrollPointLightLoop"/>.
        /// </summary>
        public System.Boolean UnrollPointLightLoop;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.LightingConfiguration.UnrollSpotLightLoop"/>.
        /// </summary>
        public System.Boolean UnrollSpotLightLoop;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.LightingConfiguration.ShadowConfigurations"/>.
        /// </summary>
        public SiliconStudio.Paradox.Effects.Data.ShadowConfigurationArrayData ShadowConfigurations;
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Effects.LightingConfigurationsSet"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("LightingConfigurationsSetData")]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Contents.DataContentSerializer<LightingConfigurationsSetData>))]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Converters.DataContentConverterSerializer<SiliconStudio.Paradox.Effects.LightingConfigurationsSet>))]
    public partial class LightingConfigurationsSetData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.LightingConfigurationsSet.Configs"/>.
        /// </summary>
        public SiliconStudio.Paradox.Effects.Data.LightingConfigurationData[] Configs;
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Effects.Material"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("MaterialData")]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Contents.DataContentSerializer<MaterialData>))]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Converters.DataContentConverterSerializer<SiliconStudio.Paradox.Effects.Material>))]
    public partial class MaterialData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Material.Parameters"/>.
        /// </summary>
        public SiliconStudio.Paradox.Effects.Data.ParameterCollectionData Parameters;
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Effects.MeshDraw"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("MeshDrawData")]
    public partial class MeshDrawData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.MeshDraw.PrimitiveType"/>.
        /// </summary>
        public SiliconStudio.Paradox.Graphics.PrimitiveType PrimitiveType;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.MeshDraw.DrawCount"/>.
        /// </summary>
        public System.Int32 DrawCount;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.MeshDraw.StartLocation"/>.
        /// </summary>
        public System.Int32 StartLocation;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.MeshDraw.VertexBuffers"/>.
        /// </summary>
        public SiliconStudio.Paradox.Graphics.Data.VertexBufferBindingData[] VertexBuffers;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.MeshDraw.IndexBuffer"/>.
        /// </summary>
        public SiliconStudio.Paradox.Graphics.Data.IndexBufferBindingData IndexBuffer;
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Effects.Mesh"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("MeshData")]
    public partial class MeshData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Mesh.Draw"/>.
        /// </summary>
        public SiliconStudio.Paradox.Effects.Data.MeshDrawData Draw;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Mesh.Material"/>.
        /// </summary>
        public SiliconStudio.Core.Serialization.ContentReference<SiliconStudio.Paradox.Effects.Data.MaterialData> Material;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Mesh.Parameters"/>.
        /// </summary>
        public SiliconStudio.Paradox.Effects.Data.ParameterCollectionData Parameters;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Mesh.NodeIndex"/>.
        /// </summary>
        public System.Int32 NodeIndex;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Mesh.Name"/>.
        /// </summary>
        public System.String Name;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Mesh.BoundingBox"/>.
        /// </summary>
        public SiliconStudio.Core.Mathematics.BoundingBox BoundingBox;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Mesh.Skinning"/>.
        /// </summary>
        public SiliconStudio.Paradox.Effects.MeshSkinningDefinition Skinning;
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Effects.Model"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("ModelData")]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Contents.DataContentSerializer<ModelData>))]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Converters.DataContentConverterSerializer<SiliconStudio.Paradox.Effects.Model>))]
    public partial class ModelData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Model.Children"/>.
        /// </summary>
        public System.Collections.Generic.IList<SiliconStudio.Core.Serialization.ContentReference<SiliconStudio.Paradox.Effects.Data.ModelData>> Children;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Model.Meshes"/>.
        /// </summary>
        public System.Collections.Generic.List<SiliconStudio.Paradox.Effects.Data.MeshData> Meshes = new System.Collections.Generic.List<SiliconStudio.Paradox.Effects.Data.MeshData>();

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Model.Hierarchy"/>.
        /// </summary>
        public SiliconStudio.Paradox.Effects.ModelViewHierarchyDefinition Hierarchy;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Model.BoundingBox"/>.
        /// </summary>
        public SiliconStudio.Core.Mathematics.BoundingBox BoundingBox;
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Effects.Scene"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("SceneData")]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Contents.DataContentSerializer<SceneData>))]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Converters.DataContentConverterSerializer<SiliconStudio.Paradox.Effects.Scene>))]
    public partial class SceneData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Scene.Model"/>.
        /// </summary>
        public SiliconStudio.Core.Serialization.ContentReference<SiliconStudio.Paradox.Effects.Data.ModelData> Model;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Scene.Animation"/>.
        /// </summary>
        public SiliconStudio.Core.Serialization.ContentReference<SiliconStudio.Paradox.DataModel.AnimationClip> Animation;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Scene.Lights"/>.
        /// </summary>
        public System.Collections.Generic.List<SiliconStudio.Paradox.Data.EntityComponentReference<SiliconStudio.Paradox.Engine.LightComponent>> Lights;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.Scene.Cameras"/>.
        /// </summary>
        public System.Collections.Generic.List<SiliconStudio.Paradox.Data.EntityComponentReference<SiliconStudio.Paradox.Engine.CameraComponent>> Cameras;
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Effects.ShadowConfiguration"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("ShadowConfigurationData")]
    public partial class ShadowConfigurationData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.ShadowConfiguration.LightType"/>.
        /// </summary>
        public SiliconStudio.Paradox.DataModel.LightType LightType;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.ShadowConfiguration.ShadowCount"/>.
        /// </summary>
        public System.Int32 ShadowCount;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.ShadowConfiguration.CascadeCount"/>.
        /// </summary>
        public System.Int32 CascadeCount;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.ShadowConfiguration.FilterType"/>.
        /// </summary>
        public SiliconStudio.Paradox.Engine.ShadowMapFilterType FilterType;
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Effects.ShadowConfigurationArray"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("ShadowConfigurationArrayData")]
    public partial class ShadowConfigurationArrayData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Effects.ShadowConfigurationArray.Groups"/>.
        /// </summary>
        public System.Collections.Generic.List<SiliconStudio.Paradox.Effects.Data.ShadowConfigurationData> Groups;
    }

}

namespace SiliconStudio.Paradox.EntityModel.Data
{
    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.EntityModel.EntityComponent"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("EntityComponentData")]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Contents.DataContentSerializer<EntityComponentData>))]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Converters.DataContentConverterSerializer<SiliconStudio.Paradox.EntityModel.EntityComponent>))]
    public partial class EntityComponentData
    {
    }

}

namespace SiliconStudio.Paradox.Engine.Data
{
    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Engine.ModelNodeLinkComponent"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("ModelNodeLinkComponentData")]
    public partial class ModelNodeLinkComponentData : SiliconStudio.Paradox.EntityModel.Data.EntityComponentData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.ModelNodeLinkComponent.Target"/>.
        /// </summary>
        public SiliconStudio.Paradox.Data.EntityComponentReference<SiliconStudio.Paradox.Engine.ModelComponent> Target;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.ModelNodeLinkComponent.NodeName"/>.
        /// </summary>
        public System.String NodeName;
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Engine.SpriteComponent"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("SpriteComponentData")]
    public partial class SpriteComponentData : SiliconStudio.Paradox.EntityModel.Data.EntityComponentData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.SpriteComponent.SpriteGroupInternal"/>.
        /// </summary>
        public SiliconStudio.Core.Serialization.ContentReference<SiliconStudio.Paradox.Graphics.Data.SpriteGroupData> SpriteGroupInternal;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.SpriteComponent.Color"/>.
        /// </summary>
        public SiliconStudio.Core.Mathematics.Color Color;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.SpriteComponent.SpriteEffect"/>.
        /// </summary>
        public SiliconStudio.Paradox.Graphics.SpriteEffects SpriteEffect;
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Engine.CameraComponent"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("CameraComponentData")]
    public partial class CameraComponentData : SiliconStudio.Paradox.EntityModel.Data.EntityComponentData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.CameraComponent.VerticalFieldOfView"/>.
        /// </summary>
        public System.Single VerticalFieldOfView;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.CameraComponent.NearPlane"/>.
        /// </summary>
        public System.Single NearPlane;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.CameraComponent.FarPlane"/>.
        /// </summary>
        public System.Single FarPlane;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.CameraComponent.AspectRatio"/>.
        /// </summary>
        public System.Single AspectRatio;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.CameraComponent.Target"/>.
        /// </summary>
        public SiliconStudio.Core.Serialization.ContentReference<SiliconStudio.Paradox.EntityModel.Data.EntityData> Target;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.CameraComponent.TargetUp"/>.
        /// </summary>
        public SiliconStudio.Core.Mathematics.Vector3 TargetUp;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.CameraComponent.AutoFocus"/>.
        /// </summary>
        public System.Boolean AutoFocus;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.CameraComponent.FocusDistance"/>.
        /// </summary>
        public System.Single FocusDistance;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.CameraComponent.UseViewMatrix"/>.
        /// </summary>
        public System.Boolean UseViewMatrix;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.CameraComponent.ViewMatrix"/>.
        /// </summary>
        public SiliconStudio.Core.Mathematics.Matrix ViewMatrix;
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Engine.LightComponent"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("LightComponentData")]
    public partial class LightComponentData : SiliconStudio.Paradox.EntityModel.Data.EntityComponentData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.Enabled"/>.
        /// </summary>
        public System.Boolean Enabled;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.Deferred"/>.
        /// </summary>
        public System.Boolean Deferred;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.Type"/>.
        /// </summary>
        public SiliconStudio.Paradox.DataModel.LightType Type;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.Color"/>.
        /// </summary>
        public SiliconStudio.Core.Mathematics.Color3 Color;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.Intensity"/>.
        /// </summary>
        public System.Single Intensity;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.DecayStart"/>.
        /// </summary>
        public System.Single DecayStart;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.LightDirection"/>.
        /// </summary>
        public SiliconStudio.Core.Mathematics.Vector3 LightDirection;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.SpotBeamAngle"/>.
        /// </summary>
        public System.Single SpotBeamAngle;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.SpotFieldAngle"/>.
        /// </summary>
        public System.Single SpotFieldAngle;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.ShadowMap"/>.
        /// </summary>
        public System.Boolean ShadowMap;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.ShadowMapMaxSize"/>.
        /// </summary>
        public System.Int32 ShadowMapMaxSize;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.ShadowMapMinSize"/>.
        /// </summary>
        public System.Int32 ShadowMapMinSize;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.ShadowMapCascadeCount"/>.
        /// </summary>
        public System.Int32 ShadowMapCascadeCount;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.ShadowNearDistance"/>.
        /// </summary>
        public System.Single ShadowNearDistance;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.ShadowFarDistance"/>.
        /// </summary>
        public System.Single ShadowFarDistance;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.ShadowMapFilterType"/>.
        /// </summary>
        public SiliconStudio.Paradox.Engine.ShadowMapFilterType ShadowMapFilterType;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.BleedingFactor"/>.
        /// </summary>
        public System.Single BleedingFactor;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.MinVariance"/>.
        /// </summary>
        public System.Single MinVariance;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightComponent.Layers"/>.
        /// </summary>
        public SiliconStudio.Paradox.Effects.RenderLayers Layers;
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Engine.LightShaftsComponent"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("LightShaftsComponentData")]
    public partial class LightShaftsComponentData : SiliconStudio.Paradox.EntityModel.Data.EntityComponentData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.LightShaftsComponent.Color"/>.
        /// </summary>
        public SiliconStudio.Core.Mathematics.Color3 Color;
    }

}

namespace SiliconStudio.Paradox.EntityModel.Data
{
    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.EntityModel.EntityGroup"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("EntityGroupData")]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Contents.DataContentSerializer<EntityGroupData>))]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Converters.DataContentConverterSerializer<SiliconStudio.Paradox.EntityModel.EntityGroup>))]
    public partial class EntityGroupData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.EntityModel.EntityGroup.Entities"/>.
        /// </summary>
        public System.Collections.Generic.List<SiliconStudio.Core.Serialization.ContentReference<SiliconStudio.Paradox.EntityModel.Data.EntityData>> Entities = new System.Collections.Generic.List<SiliconStudio.Core.Serialization.ContentReference<SiliconStudio.Paradox.EntityModel.Data.EntityData>>();
    }

}

namespace SiliconStudio.Paradox.Engine.Data
{
    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Engine.AnimationComponent"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("AnimationComponentData")]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Contents.DataContentSerializer<AnimationComponentData>))]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Converters.DataContentConverterSerializer<SiliconStudio.Paradox.Engine.AnimationComponent>))]
    public partial class AnimationComponentData : SiliconStudio.Paradox.EntityModel.Data.EntityComponentData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.AnimationComponent.Animations"/>.
        /// </summary>
        public System.Collections.Generic.Dictionary<System.String,SiliconStudio.Core.Serialization.ContentReference<SiliconStudio.Paradox.DataModel.AnimationClip>> Animations = new System.Collections.Generic.Dictionary<System.String,SiliconStudio.Core.Serialization.ContentReference<SiliconStudio.Paradox.DataModel.AnimationClip>>();
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Engine.ModelComponent"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("ModelComponentData")]
    public partial class ModelComponentData : SiliconStudio.Paradox.EntityModel.Data.EntityComponentData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.ModelComponent.Model"/>.
        /// </summary>
        public SiliconStudio.Core.Serialization.ContentReference<SiliconStudio.Paradox.Effects.Data.ModelData> Model;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.ModelComponent.Enabled"/>.
        /// </summary>
        public System.Boolean Enabled;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.ModelComponent.DrawOrder"/>.
        /// </summary>
        public System.Int32 DrawOrder;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.ModelComponent.Parameters"/>.
        /// </summary>
        public SiliconStudio.Paradox.Effects.Data.ParameterCollectionData Parameters;
    }

    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.Engine.TransformationComponent"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("TransformationComponentData")]
    public partial class TransformationComponentData : SiliconStudio.Paradox.EntityModel.Data.EntityComponentData
    {
        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.TransformationComponent.UseTRS"/>.
        /// </summary>
        public System.Boolean UseTRS;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.TransformationComponent.Children"/>.
        /// </summary>
        public SiliconStudio.Core.Collections.FastCollection<SiliconStudio.Paradox.Data.EntityComponentReference<SiliconStudio.Paradox.Engine.TransformationComponent>> Children;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.TransformationComponent.Translation"/>.
        /// </summary>
        public SiliconStudio.Core.Mathematics.Vector3 Translation;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.TransformationComponent.Rotation"/>.
        /// </summary>
        public SiliconStudio.Core.Mathematics.Quaternion Rotation;

        /// <summary>
        /// Data field for <see cref="SiliconStudio.Paradox.Engine.TransformationComponent.Scaling"/>.
        /// </summary>
        public SiliconStudio.Core.Mathematics.Vector3 Scaling;
    }

}

namespace SiliconStudio.Paradox.EntityModel.Data
{
    /// <summary>
    /// Data type for <see cref="SiliconStudio.Paradox.EntityModel.Entity"/>.
    /// </summary>
    [SiliconStudio.Core.DataContract("EntityData")]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Contents.DataContentSerializer<EntityData>))]
    [SiliconStudio.Core.Serialization.Contents.ContentSerializer(typeof(SiliconStudio.Core.Serialization.Converters.DataContentConverterSerializer<SiliconStudio.Paradox.EntityModel.Entity>))]
    public partial class EntityData
    {
    }



}

namespace SiliconStudio.Paradox.Effects.Data
{
    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Effects.LightingConfiguration"/>.
    /// </summary>
    public partial class LightingConfigurationDataConverter : SiliconStudio.Core.Serialization.Converters.DataConverter<SiliconStudio.Paradox.Effects.Data.LightingConfigurationData, SiliconStudio.Paradox.Effects.LightingConfiguration>	
	{
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Effects.Data.LightingConfigurationData target, SiliconStudio.Paradox.Effects.LightingConfiguration source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Effects.Data.LightingConfigurationData();
				
            target.MaxNumDirectionalLight = source.MaxNumDirectionalLight;
            target.MaxNumPointLight = source.MaxNumPointLight;
            target.MaxNumSpotLight = source.MaxNumSpotLight;
            target.UnrollDirectionalLightLoop = source.UnrollDirectionalLightLoop;
            target.UnrollPointLightLoop = source.UnrollPointLightLoop;
            target.UnrollSpotLightLoop = source.UnrollSpotLightLoop;
            context.ConvertToData(ref target.ShadowConfigurations, source.ShadowConfigurations);
        }

        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Effects.Data.LightingConfigurationData target, ref SiliconStudio.Paradox.Effects.LightingConfiguration source)
        {
            source.MaxNumDirectionalLight = target.MaxNumDirectionalLight;
            source.MaxNumPointLight = target.MaxNumPointLight;
            source.MaxNumSpotLight = target.MaxNumSpotLight;
            source.UnrollDirectionalLightLoop = target.UnrollDirectionalLightLoop;
            source.UnrollPointLightLoop = target.UnrollPointLightLoop;
            source.UnrollSpotLightLoop = target.UnrollSpotLightLoop;
            {
                var temp = source.ShadowConfigurations;
                context.ConvertFromData(target.ShadowConfigurations, ref temp);
                source.ShadowConfigurations = temp;
            }
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Effects.LightingConfigurationsSet"/>.
    /// </summary>
    public partial class LightingConfigurationsSetDataConverter : SiliconStudio.Core.Serialization.Converters.DataConverter<SiliconStudio.Paradox.Effects.Data.LightingConfigurationsSetData, SiliconStudio.Paradox.Effects.LightingConfigurationsSet>	
	{
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Effects.Data.LightingConfigurationsSetData target, SiliconStudio.Paradox.Effects.LightingConfigurationsSet source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Effects.Data.LightingConfigurationsSetData();
				
            context.ConvertToData(ref target.Configs, source.Configs);
        }

        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Effects.Data.LightingConfigurationsSetData target, ref SiliconStudio.Paradox.Effects.LightingConfigurationsSet source)
        {
            if(source == null)
                source = new SiliconStudio.Paradox.Effects.LightingConfigurationsSet();

            {
                var temp = source.Configs;
                context.ConvertFromData(target.Configs, ref temp);
                source.Configs = temp;
            }
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Effects.Material"/>.
    /// </summary>
    public partial class MaterialDataConverter : SiliconStudio.Core.Serialization.Converters.DataConverter<SiliconStudio.Paradox.Effects.Data.MaterialData, SiliconStudio.Paradox.Effects.Material>	
	{
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Effects.Data.MaterialData target, SiliconStudio.Paradox.Effects.Material source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Effects.Data.MaterialData();
				
            context.ConvertToData(ref target.Parameters, source.Parameters);
        }

        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Effects.Data.MaterialData target, ref SiliconStudio.Paradox.Effects.Material source)
        {
            if(source == null)
                source = new SiliconStudio.Paradox.Effects.Material();

            {
                var temp = source.Parameters;
                context.ConvertFromData(target.Parameters, ref temp);
                source.Parameters = temp;
            }
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Effects.MeshDraw"/>.
    /// </summary>
    public partial class MeshDrawDataConverter : SiliconStudio.Core.Serialization.Converters.DataConverter<SiliconStudio.Paradox.Effects.Data.MeshDrawData, SiliconStudio.Paradox.Effects.MeshDraw>	
	{
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Effects.Data.MeshDrawData target, SiliconStudio.Paradox.Effects.MeshDraw source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Effects.Data.MeshDrawData();
				
            target.PrimitiveType = source.PrimitiveType;
            target.DrawCount = source.DrawCount;
            target.StartLocation = source.StartLocation;
            context.ConvertToData(ref target.VertexBuffers, source.VertexBuffers);
            context.ConvertToData(ref target.IndexBuffer, source.IndexBuffer);
        }

        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Effects.Data.MeshDrawData target, ref SiliconStudio.Paradox.Effects.MeshDraw source)
        {
            if(source == null)
                source = new SiliconStudio.Paradox.Effects.MeshDraw();

            source.PrimitiveType = target.PrimitiveType;
            source.DrawCount = target.DrawCount;
            source.StartLocation = target.StartLocation;
            {
                var temp = source.VertexBuffers;
                context.ConvertFromData(target.VertexBuffers, ref temp);
                source.VertexBuffers = temp;
            }
            {
                var temp = source.IndexBuffer;
                context.ConvertFromData(target.IndexBuffer, ref temp);
                source.IndexBuffer = temp;
            }
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Effects.Mesh"/>.
    /// </summary>
    public partial class MeshDataConverter : SiliconStudio.Core.Serialization.Converters.DataConverter<SiliconStudio.Paradox.Effects.Data.MeshData, SiliconStudio.Paradox.Effects.Mesh>	
	{
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Effects.Data.MeshData target, SiliconStudio.Paradox.Effects.Mesh source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Effects.Data.MeshData();
				
            context.ConvertToData(ref target.Draw, source.Draw);
            context.ConvertToData(ref target.Material, source.Material);
            context.ConvertToData(ref target.Parameters, source.Parameters);
            target.NodeIndex = source.NodeIndex;
            target.Name = source.Name;
            target.BoundingBox = source.BoundingBox;
            target.Skinning = source.Skinning;
        }

        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Effects.Data.MeshData target, ref SiliconStudio.Paradox.Effects.Mesh source)
        {
            if(source == null)
                source = new SiliconStudio.Paradox.Effects.Mesh();

            {
                var temp = source.Draw;
                context.ConvertFromData(target.Draw, ref temp);
                source.Draw = temp;
            }
            {
                var temp = source.Material;
                context.ConvertFromData(target.Material, ref temp);
                source.Material = temp;
            }
            {
                var temp = source.Parameters;
                context.ConvertFromData(target.Parameters, ref temp);
                source.Parameters = temp;
            }
            source.NodeIndex = target.NodeIndex;
            source.Name = target.Name;
            source.BoundingBox = target.BoundingBox;
            source.Skinning = target.Skinning;
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Effects.Model"/>.
    /// </summary>
    public partial class ModelDataConverter : SiliconStudio.Core.Serialization.Converters.DataConverter<SiliconStudio.Paradox.Effects.Data.ModelData, SiliconStudio.Paradox.Effects.Model>	
	{
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Effects.Data.ModelData target, SiliconStudio.Paradox.Effects.Model source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Effects.Data.ModelData();
				
            context.ConvertToData(ref target.Children, source.Children);
            context.ConvertToData(ref target.Meshes, source.Meshes);
            target.Hierarchy = source.Hierarchy;
            target.BoundingBox = source.BoundingBox;
        }

        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Effects.Data.ModelData target, ref SiliconStudio.Paradox.Effects.Model source)
        {
            if(source == null)
                source = new SiliconStudio.Paradox.Effects.Model();

            {
                var temp = source.Children;
                context.ConvertFromData(target.Children, ref temp);
                source.Children = temp;
            }
            {
                var temp = source.Meshes;
                context.ConvertFromData(target.Meshes, ref temp);
            }
            source.Hierarchy = target.Hierarchy;
            source.BoundingBox = target.BoundingBox;
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Effects.Scene"/>.
    /// </summary>
    public partial class SceneDataConverter : SiliconStudio.Core.Serialization.Converters.DataConverter<SiliconStudio.Paradox.Effects.Data.SceneData, SiliconStudio.Paradox.Effects.Scene>	
	{
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Effects.Data.SceneData target, SiliconStudio.Paradox.Effects.Scene source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Effects.Data.SceneData();
				
            context.ConvertToData(ref target.Model, source.Model);
            context.ConvertToData(ref target.Animation, source.Animation);
            context.ConvertToData(ref target.Lights, source.Lights);
            context.ConvertToData(ref target.Cameras, source.Cameras);
        }

        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Effects.Data.SceneData target, ref SiliconStudio.Paradox.Effects.Scene source)
        {
            if(source == null)
                source = new SiliconStudio.Paradox.Effects.Scene();

            {
                var temp = source.Model;
                context.ConvertFromData(target.Model, ref temp);
                source.Model = temp;
            }
            {
                var temp = source.Animation;
                context.ConvertFromData(target.Animation, ref temp);
                source.Animation = temp;
            }
            {
                var temp = source.Lights;
                context.ConvertFromData(target.Lights, ref temp);
                source.Lights = temp;
            }
            {
                var temp = source.Cameras;
                context.ConvertFromData(target.Cameras, ref temp);
                source.Cameras = temp;
            }
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Effects.ShadowConfiguration"/>.
    /// </summary>
    public partial class ShadowConfigurationDataConverter : SiliconStudio.Core.Serialization.Converters.DataConverter<SiliconStudio.Paradox.Effects.Data.ShadowConfigurationData, SiliconStudio.Paradox.Effects.ShadowConfiguration>	
	{
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Effects.Data.ShadowConfigurationData target, SiliconStudio.Paradox.Effects.ShadowConfiguration source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Effects.Data.ShadowConfigurationData();
				
            target.LightType = source.LightType;
            target.ShadowCount = source.ShadowCount;
            target.CascadeCount = source.CascadeCount;
            target.FilterType = source.FilterType;
        }

        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Effects.Data.ShadowConfigurationData target, ref SiliconStudio.Paradox.Effects.ShadowConfiguration source)
        {
            source.LightType = target.LightType;
            source.ShadowCount = target.ShadowCount;
            source.CascadeCount = target.CascadeCount;
            source.FilterType = target.FilterType;
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Effects.ShadowConfigurationArray"/>.
    /// </summary>
    public partial class ShadowConfigurationArrayDataConverter : SiliconStudio.Core.Serialization.Converters.DataConverter<SiliconStudio.Paradox.Effects.Data.ShadowConfigurationArrayData, SiliconStudio.Paradox.Effects.ShadowConfigurationArray>	
	{
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Effects.Data.ShadowConfigurationArrayData target, SiliconStudio.Paradox.Effects.ShadowConfigurationArray source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Effects.Data.ShadowConfigurationArrayData();
				
            context.ConvertToData(ref target.Groups, source.Groups);
        }

        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Effects.Data.ShadowConfigurationArrayData target, ref SiliconStudio.Paradox.Effects.ShadowConfigurationArray source)
        {
            if(source == null)
                source = new SiliconStudio.Paradox.Effects.ShadowConfigurationArray();

            {
                var temp = source.Groups;
                context.ConvertFromData(target.Groups, ref temp);
                source.Groups = temp;
            }
        }
    }


}

namespace SiliconStudio.Paradox.Engine.Data
{
    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Engine.ModelNodeLinkComponent"/>.
    /// </summary>
    public partial class ModelNodeLinkComponentDataConverter : SiliconStudio.Paradox.EntityModel.Data.EntityComponentDataConverter	
	{
		/// <inheritdoc/>
		public override System.Type DataType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData); }
		}

		/// <inheritdoc/>
		public override System.Type ObjectType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.ModelNodeLinkComponent); }
		}
				
        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.ModelNodeLinkComponent)obj;
            ConvertFromData(converterContext, dataT, ref objT);
            obj = objT;
        }
		
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, ref object data, object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.ModelNodeLinkComponent)obj;
            ConvertToData(converterContext, ref dataT, objT);
            data = dataT;
        }

		        /// <inheritdoc/>
        public void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData target, SiliconStudio.Paradox.Engine.ModelNodeLinkComponent source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData();
				
			{
				var targetBase = (SiliconStudio.Paradox.EntityModel.Data.EntityComponentData)target;
				var sourceBase = (SiliconStudio.Paradox.EntityModel.EntityComponent)source;
				ConvertToData(context, ref targetBase, sourceBase);
			}

            context.ConvertToData(ref target.Target, source.Target);
            target.NodeName = source.NodeName;
        }

        public override bool CanConstruct
        {
            get { return true; }
        }
		
		
        /// <inheritdoc/>
        public override void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.ModelNodeLinkComponent)obj;
            ConstructFromData(converterContext, dataT, ref objT);
            obj = objT;
        }

		/// <inheritdoc/>
        public void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData target, ref SiliconStudio.Paradox.Engine.ModelNodeLinkComponent source)
		{
			source = new SiliconStudio.Paradox.Engine.ModelNodeLinkComponent();
		}

        /// <inheritdoc/>
        public void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.ModelNodeLinkComponentData target, ref SiliconStudio.Paradox.Engine.ModelNodeLinkComponent source)
        {
            {
                var temp = source.Target;
                context.ConvertFromData(target.Target, ref temp);
                source.Target = temp;
            }
            source.NodeName = target.NodeName;
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Engine.SpriteComponent"/>.
    /// </summary>
    public partial class SpriteComponentDataConverter : SiliconStudio.Paradox.EntityModel.Data.EntityComponentDataConverter	
	{
		/// <inheritdoc/>
		public override System.Type DataType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.Data.SpriteComponentData); }
		}

		/// <inheritdoc/>
		public override System.Type ObjectType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.SpriteComponent); }
		}
				
        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.SpriteComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.SpriteComponent)obj;
            ConvertFromData(converterContext, dataT, ref objT);
            obj = objT;
        }
		
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, ref object data, object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.SpriteComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.SpriteComponent)obj;
            ConvertToData(converterContext, ref dataT, objT);
            data = dataT;
        }

		        /// <inheritdoc/>
        public void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Engine.Data.SpriteComponentData target, SiliconStudio.Paradox.Engine.SpriteComponent source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Engine.Data.SpriteComponentData();
				
			{
				var targetBase = (SiliconStudio.Paradox.EntityModel.Data.EntityComponentData)target;
				var sourceBase = (SiliconStudio.Paradox.EntityModel.EntityComponent)source;
				ConvertToData(context, ref targetBase, sourceBase);
			}

            context.ConvertToData(ref target.SpriteGroupInternal, source.SpriteGroupInternal);
            target.Color = source.Color;
            target.SpriteEffect = source.SpriteEffect;
        }

        public override bool CanConstruct
        {
            get { return true; }
        }
		
		
        /// <inheritdoc/>
        public override void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.SpriteComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.SpriteComponent)obj;
            ConstructFromData(converterContext, dataT, ref objT);
            obj = objT;
        }

		/// <inheritdoc/>
        public void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.SpriteComponentData target, ref SiliconStudio.Paradox.Engine.SpriteComponent source)
		{
			source = new SiliconStudio.Paradox.Engine.SpriteComponent();
		}

        /// <inheritdoc/>
        public void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.SpriteComponentData target, ref SiliconStudio.Paradox.Engine.SpriteComponent source)
        {
            {
                var temp = source.SpriteGroupInternal;
                context.ConvertFromData(target.SpriteGroupInternal, ref temp);
                source.SpriteGroupInternal = temp;
            }
            source.Color = target.Color;
            source.SpriteEffect = target.SpriteEffect;
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Engine.CameraComponent"/>.
    /// </summary>
    public partial class CameraComponentDataConverter : SiliconStudio.Paradox.EntityModel.Data.EntityComponentDataConverter	
	{
		/// <inheritdoc/>
		public override System.Type DataType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.Data.CameraComponentData); }
		}

		/// <inheritdoc/>
		public override System.Type ObjectType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.CameraComponent); }
		}
				
        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.CameraComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.CameraComponent)obj;
            ConvertFromData(converterContext, dataT, ref objT);
            obj = objT;
        }
		
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, ref object data, object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.CameraComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.CameraComponent)obj;
            ConvertToData(converterContext, ref dataT, objT);
            data = dataT;
        }

		        /// <inheritdoc/>
        public void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Engine.Data.CameraComponentData target, SiliconStudio.Paradox.Engine.CameraComponent source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Engine.Data.CameraComponentData();
				
			{
				var targetBase = (SiliconStudio.Paradox.EntityModel.Data.EntityComponentData)target;
				var sourceBase = (SiliconStudio.Paradox.EntityModel.EntityComponent)source;
				ConvertToData(context, ref targetBase, sourceBase);
			}

            target.VerticalFieldOfView = source.VerticalFieldOfView;
            target.NearPlane = source.NearPlane;
            target.FarPlane = source.FarPlane;
            target.AspectRatio = source.AspectRatio;
            context.ConvertToData(ref target.Target, source.Target);
            target.TargetUp = source.TargetUp;
            target.AutoFocus = source.AutoFocus;
            target.FocusDistance = source.FocusDistance;
            target.UseViewMatrix = source.UseViewMatrix;
            target.ViewMatrix = source.ViewMatrix;
        }

        public override bool CanConstruct
        {
            get { return true; }
        }
		
		
        /// <inheritdoc/>
        public override void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.CameraComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.CameraComponent)obj;
            ConstructFromData(converterContext, dataT, ref objT);
            obj = objT;
        }

		/// <inheritdoc/>
        public void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.CameraComponentData target, ref SiliconStudio.Paradox.Engine.CameraComponent source)
		{
			source = new SiliconStudio.Paradox.Engine.CameraComponent();
		}

        /// <inheritdoc/>
        public void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.CameraComponentData target, ref SiliconStudio.Paradox.Engine.CameraComponent source)
        {
            source.VerticalFieldOfView = target.VerticalFieldOfView;
            source.NearPlane = target.NearPlane;
            source.FarPlane = target.FarPlane;
            source.AspectRatio = target.AspectRatio;
            {
                var temp = source.Target;
                context.ConvertFromData(target.Target, ref temp);
                source.Target = temp;
            }
            source.TargetUp = target.TargetUp;
            source.AutoFocus = target.AutoFocus;
            source.FocusDistance = target.FocusDistance;
            source.UseViewMatrix = target.UseViewMatrix;
            source.ViewMatrix = target.ViewMatrix;
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Engine.LightComponent"/>.
    /// </summary>
    public partial class LightComponentDataConverter : SiliconStudio.Paradox.EntityModel.Data.EntityComponentDataConverter	
	{
		/// <inheritdoc/>
		public override System.Type DataType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.Data.LightComponentData); }
		}

		/// <inheritdoc/>
		public override System.Type ObjectType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.LightComponent); }
		}
				
        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.LightComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.LightComponent)obj;
            ConvertFromData(converterContext, dataT, ref objT);
            obj = objT;
        }
		
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, ref object data, object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.LightComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.LightComponent)obj;
            ConvertToData(converterContext, ref dataT, objT);
            data = dataT;
        }

		        /// <inheritdoc/>
        public void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Engine.Data.LightComponentData target, SiliconStudio.Paradox.Engine.LightComponent source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Engine.Data.LightComponentData();
				
			{
				var targetBase = (SiliconStudio.Paradox.EntityModel.Data.EntityComponentData)target;
				var sourceBase = (SiliconStudio.Paradox.EntityModel.EntityComponent)source;
				ConvertToData(context, ref targetBase, sourceBase);
			}

            target.Enabled = source.Enabled;
            target.Deferred = source.Deferred;
            target.Type = source.Type;
            target.Color = source.Color;
            target.Intensity = source.Intensity;
            target.DecayStart = source.DecayStart;
            target.LightDirection = source.LightDirection;
            target.SpotBeamAngle = source.SpotBeamAngle;
            target.SpotFieldAngle = source.SpotFieldAngle;
            target.ShadowMap = source.ShadowMap;
            target.ShadowMapMaxSize = source.ShadowMapMaxSize;
            target.ShadowMapMinSize = source.ShadowMapMinSize;
            target.ShadowMapCascadeCount = source.ShadowMapCascadeCount;
            target.ShadowNearDistance = source.ShadowNearDistance;
            target.ShadowFarDistance = source.ShadowFarDistance;
            target.ShadowMapFilterType = source.ShadowMapFilterType;
            target.BleedingFactor = source.BleedingFactor;
            target.MinVariance = source.MinVariance;
            target.Layers = source.Layers;
        }

        public override bool CanConstruct
        {
            get { return true; }
        }
		
		
        /// <inheritdoc/>
        public override void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.LightComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.LightComponent)obj;
            ConstructFromData(converterContext, dataT, ref objT);
            obj = objT;
        }

		/// <inheritdoc/>
        public void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.LightComponentData target, ref SiliconStudio.Paradox.Engine.LightComponent source)
		{
			source = new SiliconStudio.Paradox.Engine.LightComponent();
		}

        /// <inheritdoc/>
        public void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.LightComponentData target, ref SiliconStudio.Paradox.Engine.LightComponent source)
        {
            source.Enabled = target.Enabled;
            source.Deferred = target.Deferred;
            source.Type = target.Type;
            source.Color = target.Color;
            source.Intensity = target.Intensity;
            source.DecayStart = target.DecayStart;
            source.LightDirection = target.LightDirection;
            source.SpotBeamAngle = target.SpotBeamAngle;
            source.SpotFieldAngle = target.SpotFieldAngle;
            source.ShadowMap = target.ShadowMap;
            source.ShadowMapMaxSize = target.ShadowMapMaxSize;
            source.ShadowMapMinSize = target.ShadowMapMinSize;
            source.ShadowMapCascadeCount = target.ShadowMapCascadeCount;
            source.ShadowNearDistance = target.ShadowNearDistance;
            source.ShadowFarDistance = target.ShadowFarDistance;
            source.ShadowMapFilterType = target.ShadowMapFilterType;
            source.BleedingFactor = target.BleedingFactor;
            source.MinVariance = target.MinVariance;
            source.Layers = target.Layers;
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Engine.LightShaftsComponent"/>.
    /// </summary>
    public partial class LightShaftsComponentDataConverter : SiliconStudio.Paradox.EntityModel.Data.EntityComponentDataConverter	
	{
		/// <inheritdoc/>
		public override System.Type DataType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.Data.LightShaftsComponentData); }
		}

		/// <inheritdoc/>
		public override System.Type ObjectType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.LightShaftsComponent); }
		}
				
        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.LightShaftsComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.LightShaftsComponent)obj;
            ConvertFromData(converterContext, dataT, ref objT);
            obj = objT;
        }
		
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, ref object data, object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.LightShaftsComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.LightShaftsComponent)obj;
            ConvertToData(converterContext, ref dataT, objT);
            data = dataT;
        }

		        /// <inheritdoc/>
        public void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Engine.Data.LightShaftsComponentData target, SiliconStudio.Paradox.Engine.LightShaftsComponent source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Engine.Data.LightShaftsComponentData();
				
			{
				var targetBase = (SiliconStudio.Paradox.EntityModel.Data.EntityComponentData)target;
				var sourceBase = (SiliconStudio.Paradox.EntityModel.EntityComponent)source;
				ConvertToData(context, ref targetBase, sourceBase);
			}

            target.Color = source.Color;
        }

        public override bool CanConstruct
        {
            get { return true; }
        }
		
		
        /// <inheritdoc/>
        public override void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.LightShaftsComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.LightShaftsComponent)obj;
            ConstructFromData(converterContext, dataT, ref objT);
            obj = objT;
        }

		/// <inheritdoc/>
        public void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.LightShaftsComponentData target, ref SiliconStudio.Paradox.Engine.LightShaftsComponent source)
		{
			source = new SiliconStudio.Paradox.Engine.LightShaftsComponent();
		}

        /// <inheritdoc/>
        public void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.LightShaftsComponentData target, ref SiliconStudio.Paradox.Engine.LightShaftsComponent source)
        {
            source.Color = target.Color;
        }
    }

}

namespace SiliconStudio.Paradox.EntityModel.Data
{
    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.EntityModel.EntityGroup"/>.
    /// </summary>
    public partial class EntityGroupDataConverter : SiliconStudio.Core.Serialization.Converters.DataConverter<SiliconStudio.Paradox.EntityModel.Data.EntityGroupData, SiliconStudio.Paradox.EntityModel.EntityGroup>	
	{
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.EntityModel.Data.EntityGroupData target, SiliconStudio.Paradox.EntityModel.EntityGroup source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.EntityModel.Data.EntityGroupData();
				
            context.ConvertToData(ref target.Entities, source.Entities);
        }

        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.EntityModel.Data.EntityGroupData target, ref SiliconStudio.Paradox.EntityModel.EntityGroup source)
        {
            if(source == null)
                source = new SiliconStudio.Paradox.EntityModel.EntityGroup();

            {
                var temp = source.Entities;
                context.ConvertFromData(target.Entities, ref temp);
            }
        }
    }

}

namespace SiliconStudio.Paradox.Engine.Data
{
    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Engine.AnimationComponent"/>.
    /// </summary>
    public partial class AnimationComponentDataConverter : SiliconStudio.Paradox.EntityModel.Data.EntityComponentDataConverter	
	{
		/// <inheritdoc/>
		public override System.Type DataType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.Data.AnimationComponentData); }
		}

		/// <inheritdoc/>
		public override System.Type ObjectType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.AnimationComponent); }
		}
				
        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.AnimationComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.AnimationComponent)obj;
            ConvertFromData(converterContext, dataT, ref objT);
            obj = objT;
        }
		
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, ref object data, object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.AnimationComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.AnimationComponent)obj;
            ConvertToData(converterContext, ref dataT, objT);
            data = dataT;
        }

		        /// <inheritdoc/>
        public void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Engine.Data.AnimationComponentData target, SiliconStudio.Paradox.Engine.AnimationComponent source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Engine.Data.AnimationComponentData();
				
			{
				var targetBase = (SiliconStudio.Paradox.EntityModel.Data.EntityComponentData)target;
				var sourceBase = (SiliconStudio.Paradox.EntityModel.EntityComponent)source;
				ConvertToData(context, ref targetBase, sourceBase);
			}

            context.ConvertToData(ref target.Animations, source.Animations);
        }

        public override bool CanConstruct
        {
            get { return true; }
        }
		
		
        /// <inheritdoc/>
        public override void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.AnimationComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.AnimationComponent)obj;
            ConstructFromData(converterContext, dataT, ref objT);
            obj = objT;
        }

		/// <inheritdoc/>
        public void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.AnimationComponentData target, ref SiliconStudio.Paradox.Engine.AnimationComponent source)
		{
			source = new SiliconStudio.Paradox.Engine.AnimationComponent();
		}

        /// <inheritdoc/>
        public void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.AnimationComponentData target, ref SiliconStudio.Paradox.Engine.AnimationComponent source)
        {
            {
                var temp = source.Animations;
                context.ConvertFromData(target.Animations, ref temp);
            }
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Engine.ModelComponent"/>.
    /// </summary>
    public partial class ModelComponentDataConverter : SiliconStudio.Paradox.EntityModel.Data.EntityComponentDataConverter	
	{
		/// <inheritdoc/>
		public override System.Type DataType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.Data.ModelComponentData); }
		}

		/// <inheritdoc/>
		public override System.Type ObjectType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.ModelComponent); }
		}
				
        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.ModelComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.ModelComponent)obj;
            ConvertFromData(converterContext, dataT, ref objT);
            obj = objT;
        }
		
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, ref object data, object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.ModelComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.ModelComponent)obj;
            ConvertToData(converterContext, ref dataT, objT);
            data = dataT;
        }

		        /// <inheritdoc/>
        public void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Engine.Data.ModelComponentData target, SiliconStudio.Paradox.Engine.ModelComponent source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Engine.Data.ModelComponentData();
				
			{
				var targetBase = (SiliconStudio.Paradox.EntityModel.Data.EntityComponentData)target;
				var sourceBase = (SiliconStudio.Paradox.EntityModel.EntityComponent)source;
				ConvertToData(context, ref targetBase, sourceBase);
			}

            context.ConvertToData(ref target.Model, source.Model);
            target.Enabled = source.Enabled;
            target.DrawOrder = source.DrawOrder;
            context.ConvertToData(ref target.Parameters, source.Parameters);
        }

        public override bool CanConstruct
        {
            get { return true; }
        }
		
		
        /// <inheritdoc/>
        public override void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.ModelComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.ModelComponent)obj;
            ConstructFromData(converterContext, dataT, ref objT);
            obj = objT;
        }

		/// <inheritdoc/>
        public void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.ModelComponentData target, ref SiliconStudio.Paradox.Engine.ModelComponent source)
		{
			source = new SiliconStudio.Paradox.Engine.ModelComponent();
		}

        /// <inheritdoc/>
        public void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.ModelComponentData target, ref SiliconStudio.Paradox.Engine.ModelComponent source)
        {
            {
                var temp = source.Model;
                context.ConvertFromData(target.Model, ref temp);
                source.Model = temp;
            }
            source.Enabled = target.Enabled;
            source.DrawOrder = target.DrawOrder;
            {
                var temp = source.Parameters;
                context.ConvertFromData(target.Parameters, ref temp);
            }
        }
    }

    /// <summary>
    /// Converter type for <see cref="SiliconStudio.Paradox.Engine.TransformationComponent"/>.
    /// </summary>
    public partial class TransformationComponentDataConverter : SiliconStudio.Paradox.EntityModel.Data.EntityComponentDataConverter	
	{
		/// <inheritdoc/>
		public override System.Type DataType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.Data.TransformationComponentData); }
		}

		/// <inheritdoc/>
		public override System.Type ObjectType
		{
			get { return typeof(SiliconStudio.Paradox.Engine.TransformationComponent); }
		}
				
        /// <inheritdoc/>
        public override void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.TransformationComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.TransformationComponent)obj;
            ConvertFromData(converterContext, dataT, ref objT);
            obj = objT;
        }
		
        /// <inheritdoc/>
        public override void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, ref object data, object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.TransformationComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.TransformationComponent)obj;
            ConvertToData(converterContext, ref dataT, objT);
            data = dataT;
        }

		        /// <inheritdoc/>
        public void ConvertToData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, ref SiliconStudio.Paradox.Engine.Data.TransformationComponentData target, SiliconStudio.Paradox.Engine.TransformationComponent source)
        {
			if(target == null)
                target = new SiliconStudio.Paradox.Engine.Data.TransformationComponentData();
				
			{
				var targetBase = (SiliconStudio.Paradox.EntityModel.Data.EntityComponentData)target;
				var sourceBase = (SiliconStudio.Paradox.EntityModel.EntityComponent)source;
				ConvertToData(context, ref targetBase, sourceBase);
			}

            target.UseTRS = source.UseTRS;
            context.ConvertToData(ref target.Children, source.Children);
            target.Translation = source.Translation;
            target.Rotation = source.Rotation;
            target.Scaling = source.Scaling;
        }

        public override bool CanConstruct
        {
            get { return true; }
        }
		
		
        /// <inheritdoc/>
        public override void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext converterContext, object data, ref object obj)
        {
            var dataT = (SiliconStudio.Paradox.Engine.Data.TransformationComponentData)data;
            var objT = (SiliconStudio.Paradox.Engine.TransformationComponent)obj;
            ConstructFromData(converterContext, dataT, ref objT);
            obj = objT;
        }

		/// <inheritdoc/>
        public void ConstructFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.TransformationComponentData target, ref SiliconStudio.Paradox.Engine.TransformationComponent source)
		{
			source = new SiliconStudio.Paradox.Engine.TransformationComponent();
		}

        /// <inheritdoc/>
        public void ConvertFromData(SiliconStudio.Core.Serialization.Converters.ConverterContext context, SiliconStudio.Paradox.Engine.Data.TransformationComponentData target, ref SiliconStudio.Paradox.Engine.TransformationComponent source)
        {
            source.UseTRS = target.UseTRS;
            {
                var temp = source.Children;
                context.ConvertFromData(target.Children, ref temp);
            }
            source.Translation = target.Translation;
            source.Rotation = target.Rotation;
            source.Scaling = target.Scaling;
        }
    }


}

