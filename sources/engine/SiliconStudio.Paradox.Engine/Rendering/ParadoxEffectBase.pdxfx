// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
using SiliconStudio.Paradox.Rendering.Data;
using SiliconStudio.Paradox.Rendering;
using SiliconStudio.Paradox.Rendering.Materials;

namespace SiliconStudio.Paradox.Rendering
{
    /// <summary>
    /// Base shader
    /// </summary>
    partial shader ParadoxEffectBase
    {
        using params MaterialKeys;
        using params ParadoxEffectBaseKeys;

        // -----------------------------------------------
        // Base shaders
        // -----------------------------------------------
        mixin ShaderBase;
        mixin ShadingBase;

        // -----------------------------------------------
        // Mix material per Vertex Shader
        // -----------------------------------------------
        var extensionPreVertexStageSurfaceShaders = MaterialKeys.VertexStageSurfaceShaders;
        if (extensionPreVertexStageSurfaceShaders != null)
        {
            // Must come before TransformationBase as this is responsible to modify the vertex input stream
            mixin MaterialSurfaceVertexStageCompositor;  
            mixin compose materialVertexStage = (extensionPreVertexStageSurfaceShaders);
            mixin compose streamInitializerVertexStage = MaterialKeys.VertexStageStreamInitializer;
        }

        // -----------------------------------------------
        // Transform vertex stream
        // -----------------------------------------------
        // Come after material surface per vertex
        mixin TransformationBase;
        mixin NormalStream;
        mixin TransformationWAndVP;

        // -----------------------------------------------
        // Performs normal mapping (in case of no-skinning, otherwise it is overloaded below)
        // -----------------------------------------------
        if (MaterialKeys.HasNormalMap)
        {
            mixin NormalFromNormalMapping;
        }
        else
        {
            mixin NormalFromMesh;
        }

        // -----------------------------------------------
        // Performs animation skinning (position, normal and tangent)
        // -----------------------------------------------
        if (MaterialKeys.HasSkinningPosition)
        {
            if (MaterialKeys.SkinningBones > MaterialKeys.SkinningMaxBones)
            {
                // TODO: We should use next power of two minus constant to limit shader permutations?
                MaterialKeys.SkinningMaxBones = MaterialKeys.SkinningBones;
            }
            mixin macro MaterialKeys.SkinningMaxBones;
            mixin TransformationSkinning;

            if (MaterialKeys.HasSkinningNormal)
            {
                mixin NormalMeshSkinning;
            }

            if (MaterialKeys.HasSkinningTangent)
            {
                mixin TangentMeshSkinning;
            }

            if (MaterialKeys.HasSkinningNormal)
            {
                if (MaterialKeys.HasNormalMap)
                {
                    mixin NormalVSSkinningNormalMapping;
                }
                else
                {
                    mixin NormalVSSkinningFromMesh;
                }
            }
        }

        // --------------------------------------------
        // Mix material tessellation for Domain shader
        //---------------------------------------------
        var extensionTessellationShader = MaterialKeys.TessellationShader;
        if(extensionTessellationShader != null)
        {
            mixin (extensionTessellationShader);

            var extensionDomainStageSurfaceShaders = MaterialKeys.DomainStageSurfaceShaders;
            if(extensionDomainStageSurfaceShaders != null)
            {
                mixin MaterialSurfaceDomainStageCompositor;  
                mixin compose materialDomainStage = (extensionDomainStageSurfaceShaders);
                mixin compose streamInitializerDomainStage = MaterialKeys.DomainStageStreamInitializer;
            }
        }

        // -----------------------------------------------
        // Mix Extension after vertex stage
        // -----------------------------------------------
        var extensionPostVertexStage = ParadoxEffectBaseKeys.ExtensionPostVertexStageShader;
        if (extensionPostVertexStage != null)
        {
            mixin (extensionPostVertexStage);
        }
   };
}