// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.

namespace SiliconStudio.Paradox.Rendering.Images
{
    /// <summary>
    /// A tonemap shader
    /// </summary>
    internal class ToneMapShader : ColorTransformShader, Texturing
    {
        // Luminance texture
        Texture2D LuminanceTexture;

        // Exposure
        float KeyValue = 0.18f;
        bool  AutoKeyValue = false;
        float LuminanceLocalFactor = 0.5f;
        float LuminanceAverageGlobal;

        // Color/Gamma correction
        float Contrast = 0.0f;
        float Brightness = 0.0f;

        // ToneMap Operator
        [Link("ToneMap.Operator")]
        compose ToneMapOperatorShader ToneMapOperator;

        override float4 Compute(float4 inputColor)
        {
            // Get the input color to tonemap
	        float3 color = inputColor.rgb;

            // Code based on Matt Pettineo: https://mynameismjp.wordpress.com/2010/04/30/a-closer-look-at-tone-mapping/
            // Use local luminance slightly differently to allow mix between local and global

	        // Gets the local luminance
	        float luminanceAverageLocal = LuminanceTexture.Sample(Texturing.LinearSampler, streams.TexCoord).r;

            // Calculate average geometric mean for luminance using local and global average luminances
	        float avgLuminance = lerp(LuminanceAverageGlobal, luminanceAverageLocal, LuminanceLocalFactor);
	        avgLuminance = exp2(avgLuminance);
	        avgLuminance = max(avgLuminance, 0.0001f);

	        // Apply brightness and contrast
	        float globalAverageLum = exp2(LuminanceAverageGlobal);
            // PDX-1417: OpenGL conversion doesn't seem to like globalAverageLum.xxx, creating explicit float3
            float3 globalAverageLum3 = float3(globalAverageLum, globalAverageLum, globalAverageLum);
	        //color = max(color + globalAverageLum3 * Brightness, 0.0001);
	        color = max(color + globalAverageLum3 * Brightness, 0.0001);
	        color = max(lerp(globalAverageLum3, color, Contrast + 1.0f), 0.0001);

            // Apply ToneMapping
	        color = ToneMap(color, avgLuminance);

	        return float4(color, 1.0);
        }

        float CalculateExposure(float avgLuminance)
        {    
	        float keyValue = AutoKeyValue ? 1.03f - (2.0f / (2 + log10(avgLuminance + 1))) : KeyValue;
	        float linearExposure = (keyValue / avgLuminance);
	        float exposure = log2(max(linearExposure, 0.0001f));
	        return exp2(exposure);
        }

        float3 ToneMap(float3 color, float avgLuminance)
        {
	        float exposure = CalculateExposure(avgLuminance);
	        color *= exposure;
	        color = ToneMapOperator.Compute(float4(color,1)).rgb;
	        return color;
        }
    };
}
