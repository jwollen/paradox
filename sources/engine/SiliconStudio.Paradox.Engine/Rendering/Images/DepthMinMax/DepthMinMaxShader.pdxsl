// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
/// <remarks>
/// SILICONSTUDIO_PARADOX_GRAPHICS_PROFILE: Macro - graphics profile level.
/// </remarks>

namespace SiliconStudio.Paradox.Rendering.Images
{
    /// <summary>
    /// A reduction shader
    /// </summary>
    class DepthMinMaxShader<bool TFirstPass> : ImageEffectShader
    {
        Texture2D<float> TextureMap;
        Texture2D<float2> TextureReduction;


        float max_not_1(float left, float right)
        {
            if (left == 1.0f) return right;
            if (right == 1.0f) return left;
            return max(left, right);
        }

        stage override float4 Shading()
        {
            if (TFirstPass)
            {
                float4 values;

#if SILICONSTUDIO_PARADOX_GRAPHICS_PROFILE >= GRAPHICS_PROFILE_LEVEL_10_1
                values = TextureMap.Gather(LinearSampler, streams.TexCoord);
#else
                values.x = TextureMap.Sample(PointSampler, streams.TexCoord, int2(0, 1)).r;
                values.y = TextureMap.Sample(PointSampler, streams.TexCoord, int2(1, 1)).r;
                values.z = TextureMap.Sample(PointSampler, streams.TexCoord, int2(1, 0)).r;
                values.w = TextureMap.Sample(PointSampler, streams.TexCoord, int2(0, 0)).r;
#endif
                // TODO: do a simple sort for 4 values quicker than min/max
                var minValue = min(min(values[0], values[1]), min(values[2], values[3]));
                var maxValue = max_not_1(max_not_1(values[0], values[1]), max_not_1(values[2], values[3]));

                return float4(minValue, maxValue, 0, 0);
            }
            else
            {
                float4 minValues, maxValues;

#if SILICONSTUDIO_PARADOX_GRAPHICS_PROFILE >= GRAPHICS_PROFILE_LEVEL_11_0
                minValues = TextureReduction.GatherRed(LinearSampler, streams.TexCoord);
                maxValues = TextureReduction.GatherGreen(LinearSampler, streams.TexCoord);
#else
                minValues.x = TextureReduction.Sample(PointSampler, streams.TexCoord, int2(0, 1)).r;
                minValues.y = TextureReduction.Sample(PointSampler, streams.TexCoord, int2(1, 1)).r;
                minValues.z = TextureReduction.Sample(PointSampler, streams.TexCoord, int2(1, 0)).r;
                minValues.w = TextureReduction.Sample(PointSampler, streams.TexCoord, int2(0, 0)).r;

                maxValues.x = TextureReduction.Sample(PointSampler, streams.TexCoord, int2(0, 1)).g;
                maxValues.y = TextureReduction.Sample(PointSampler, streams.TexCoord, int2(1, 1)).g;
                maxValues.z = TextureReduction.Sample(PointSampler, streams.TexCoord, int2(1, 0)).g;
                maxValues.w = TextureReduction.Sample(PointSampler, streams.TexCoord, int2(0, 0)).g;
#endif

                // TODO: do a simple sort for 4 values quicker than min/max
                var minValue = min(min(minValues[0], minValues[1]), min(minValues[2], minValues[3]));
                var maxValue = max_not_1(max_not_1(maxValues[0], maxValues[1]), max_not_1(maxValues[2], maxValues[3]));

                return float4(minValue, maxValue, 0, 0);
            }
        }
    };
}
