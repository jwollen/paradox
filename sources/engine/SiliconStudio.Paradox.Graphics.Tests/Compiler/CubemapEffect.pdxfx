// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
using SiliconStudio.Paradox.Effects.Data;
using SiliconStudio.Paradox.Effects;

namespace Test
{
    shader CubemapDisplayEffect
    {
        using params MaterialParameters;

		mixin ShaderBase;
		mixin TransformationWAndVP;
		mixin AlbedoFlatShading;
        mixin compose albedoDiffuse = ComputeColorTextureCubeBasic<TexturingKeys.TextureCube0>;
    };

	shader CubemapEffect
	{
		using params MaterialParameters;

		mixin ShaderBase;
		mixin TransformationWAndVP;
		mixin AlbedoFlatShading;

		if (MaterialParameters.AlbedoDiffuse != null)
			mixin compose albedoDiffuse = MaterialParameters.AlbedoDiffuse;
        else
            mixin compose albedoDiffuse = ComputeColorTextureCubeReflect<TexturingKeys.TextureCube0>;
	};

    shader CubemapGeomEffect
    {
		using params MaterialParameters;

		mixin ShaderBase;
		mixin TransformationWAndVP;

        mixin macro MAX_VERTEX_COUNT = 9;
        mixin CameraCube;

		mixin AlbedoFlatShading;

        if (MaterialParameters.AlbedoDiffuse != null)
			mixin compose albedoDiffuse = MaterialParameters.AlbedoDiffuse;
    };

    shader CubemapIBLEffect
    {
        mixin ParadoxBaseShader;
        mixin child ParadoxGBufferShaderPass;
    };
}