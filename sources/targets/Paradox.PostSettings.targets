<!-- Build file post-included by all Silicon Studio projects -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Include platform dependent assembly when specified -->
  <Choose>
    <When Condition="'$(ParadoxProjectPlatformDependentWindows)' == 'true'">
      <Choose>
        <When  Condition=" '$(SiliconStudioPlatform)' == 'Windows' ">
          <Choose>
            <When Condition="'$(ParadoxGraphicsApi)' == 'OpenGL' Or '$(ParadoxGraphicsApi)' == 'OpenGLES'">
              <ItemGroup>
                <Reference Include="OpenTK">
                  <HintPath>$(ParadoxDependenciesDir)OpenTK\OpenTK.dll</HintPath>
                </Reference>
              </ItemGroup>
            </When>
            <When Condition="'$(ParadoxGraphicsApi)' == 'Direct3D11'">
              <ItemGroup>
                <Reference Include="SharpDX">
                  <SpecificVersion>False</SpecificVersion>
                  <HintPath>$(ParadoxSharpDXSdkBinDir)\SharpDX.dll</HintPath>
                </Reference>
              </ItemGroup>
            </When>
          </Choose>
          <ItemGroup>
            <Reference Include="System.Data" />
            <Reference Include="System.Drawing" />
            <Reference Include="System.Windows.Forms" />
            <Reference Include="PresentationFramework" />
            <Reference Include="PresentationCore" />
            <Reference Include="WindowsBase" />
            <Reference Include="System.Xaml" />
          </ItemGroup>
        </When>
        <When Condition=" '$(SiliconStudioPlatform)' == 'Android' or '$(SiliconStudioPlatform)' == 'iOS'">
          <ItemGroup>
            <Reference Include="OpenTK-1.0" />
          </ItemGroup>
        </When>
      </Choose>
    </When>
  </Choose>  
  
  <!-- Setup compiler targets per platform / language -->
  <PropertyGroup>
    <!-- Process by default scripts with AssemblyProcessor -->
    <SiliconStudioAssemblyProcessor Condition="'$(ParadoxScript)' == 'true'">true</SiliconStudioAssemblyProcessor>
    
    <!--By default, use AssemblyProcessor from solution, unless this is a user build-->
    <ParadoxSdkToolsDir Condition="'$(ParadoxSdkToolsDir)' == ''">$(SolutionDir)Bin\Windows-Direct3D11\</ParadoxSdkToolsDir>
    <ParadoxSdkToolsDir Condition="'$(ParadoxUserBuild)' == 'true'">$(ParadoxSdkDir)\Bin\Windows-Direct3D11\</ParadoxSdkToolsDir>
    <ParadoxAssetCompilerCommand>$(ParadoxSdkToolsDir)SiliconStudio.Assets.CompilerApp.exe</ParadoxAssetCompilerCommand>
  </PropertyGroup>

  <!--Import Paradox settings-->
  <Import Project="$(MSBuildThisFileDirectory)..\common\targets\SiliconStudio.PostSettings.targets"/>
  
  <!--Temporary build targets for Build Engine-->

  <!--Temporary define the Build Engine output path-->
  <PropertyGroup>
    <BuildEngineBuildDir Condition="'$(BuildEngineBuildDir)' == ''">$(ProjectDir)$(BaseIntermediateOutputPath)\data</BuildEngineBuildDir>
    <ParadoxProjectBuildProfile Condition="'$(ParadoxProjectBuildProfile)' == ''">$(SiliconStudioPlatform)</ParadoxProjectBuildProfile>
  </PropertyGroup>
  
  <!-- Add ParadoxProject build action -->
  <ItemGroup>
    <AvailableItemName Include="ParadoxProject"/>
  </ItemGroup>

  <PropertyGroup>
    <CleanDependsOn>
      ParadoxProjectCleanTarget;
      $(CleanDependsOn);
    </CleanDependsOn>
  </PropertyGroup>

  <!-- Target used to compile content (Font/Fx files...) -->
  <Target Name="ParadoxProjectBuildTarget">
    <Exec Condition="'@(ParadoxProject)' != '' and Exists('$(ParadoxAssetCompilerCommand)') and '$(ParadoxDisableAssetCompiler)' == ''" WorkingDirectory="$(TargetDir)" Command="$(ParadoxAssetCompilerCommand) --monitor-pipe=&quot;$(ParadoxBuildToolMonitorPipeUrl)&quot; --profile=$(ParadoxProjectBuildProfile) &quot;@(ParadoxProject->'%(rootdir)%(directory)%(filename)%(extension)')&quot;" />
  </Target>

  <!-- Target used to clean content (Font/Fx files...) -->
  <Target Name="ParadoxProjectCleanTarget" DependsOnTargets="FindBuildEngineOutputDir">
    <RemoveDir Condition="'@(ParadoxProject)' != '' and Exists('$(BuildEngineOutputDirectory)')" ContinueOnError="true"  Directories="$(BuildEngineOutputDirectory)"/>
    
    <!-- Should be done separately from VS menu, but it will still be executed if ParadoxProjectIntermediateCleanTargetEnabled is true -->
    <RemoveDir Condition="'@(ParadoxProject)' != '' and Exists('$(BuildEngineBuildDir)') and '$(ParadoxProjectIntermediateCleanTargetEnabled)' == 'true'" ContinueOnError="true"  Directories="$(BuildEngineBuildDir)"/>
  </Target>

  <Target Name="ParadoxProjectIntermediateCleanTarget" DependsOnTargets="FindBuildEngineOutputDir">
    <RemoveDir Condition="'@(ParadoxProject)' != '' and Exists('$(BuildEngineBuildDir)')" ContinueOnError="true"  Directories="$(BuildEngineBuildDir)"/>
  </Target>
  
  <!-- Deploy the Assets -->

  <!-- Set the default assets deployment mode on Android -->
  <PropertyGroup>
    <AndroidDeploymentMode Condition="'$(AndroidDeploymentMode)' == ''">AndroidAPKDeployment</AndroidDeploymentMode>
  </PropertyGroup>

  <!-- Register Android asset deployment task -->
  <PropertyGroup Condition="'$(SiliconStudioPlatform)' == 'Android'">
    <PrepareForRunDependsOn>
      $(PrepareForRunDependsOn);
      DeployAssetsAndroid
    </PrepareForRunDependsOn>
  </PropertyGroup>
  
  <!-- Plugs all compilers in PrepareForRunDependsOn -->
  <PropertyGroup>
    <PrepareForRunDependsOn>
      $(PrepareForRunDependsOn);
      ParadoxProjectBuildTarget;
    </PrepareForRunDependsOn>
  </PropertyGroup>

  <UsingTask AssemblyFile="$(ParadoxSdkToolsDir)BuildTasks\SiliconStudio.Paradox.VisualStudio.BuildTasks.exe" TaskName="SiliconStudio.Paradox.VisualStudio.BuildTasks.FindBuildEngineOutputDirTask" />

  <Target Name="FindBuildEngineOutputDir">
    <!-- Get the build engine output directory -->
    <FindBuildEngineOutputDirTask Condition="'@(ParadoxProject)' != '' and Exists('$(ParadoxSdkToolsDir)BuildTasks\SiliconStudio.Paradox.VisualStudio.BuildTasks.exe')" ParadoxProjectPaths="@(ParadoxProject)" ProfileName="$(ParadoxProjectBuildProfile)">
      <Output TaskParameter="BuildOutputDirectory" PropertyName="BuildEngineOutputDirectory" />
    </FindBuildEngineOutputDirTask>
  </Target>
  
  <Target Name="CreateAssetToDeployList" DependsOnTargets="ParadoxProjectBuildTarget;FindBuildEngineOutputDir" Condition="'@(ParadoxProject)' != ''">
    
    <!-- Define the Assets to deploy -->
    <ItemGroup Condition="'$(BuildEngineOutputDirectory)' != ''">
      <AssetsToDeploy Include="$(BuildEngineOutputDirectory)\**\*.*"/>
    </ItemGroup>
    
  </Target>
  
  
  <!-- iOS: Ensure assets have been deployed before calling _CollectBundleResources -->
  <Target Name="DeployAssetsiOS" BeforeTargets="_GenerateBundleContentDir" Condition="'$(SiliconStudioPlatform)' == 'iOS' and '@(ParadoxProject)' != ''" DependsOnTargets="CreateAssetToDeployList">
    <!-- Add all game data as content on iphone. Note that "Link" doesn't work but Xamarin seems to use a similar "LogicalName" property. -->
    <ItemGroup>
      <_BundleResourceWithLogicalName Include="@(AssetsToDeploy)">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <LogicalName>data\%(RecursiveDir)%(Filename)%(Extension)</LogicalName>
      </_BundleResourceWithLogicalName>
    </ItemGroup>
  </Target>
  
  <Target Name="DeployAssetsAndroid" DependsOnTargets="CreateAssetToDeployList" Condition="'@(ParadoxProject)' != ''">
    <!-- Add .bundle to list of uncompressed extensions -->
    <PropertyGroup>
      <AndroidStoreUncompressedFileExtensions>$(AndroidStoreUncompressedFileExtensions);.bundle</AndroidStoreUncompressedFileExtensions>
    </PropertyGroup>
    
    <!-- Android - mode 2 : directly copy assets to external storage -->

    <!--<GetAndroidPackageName  Condition="'$(AndroidDeploymentMode)' == 'AndroidFastDeployment'" ManifestFile="$(_AndroidManifestAbs)" AssemblyName="$(AssemblyName)">
      <Output TaskParameter="PackageName" PropertyName="ParadoxAndroidPackage" />
    </GetAndroidPackageName>

    <AndroidFastDeploymentTask  Condition="'$(AndroidDeploymentMode)' == 'AndroidFastDeployment'"
      AndroidPackageName="$(ParadoxAndroidPackage)"
      BuildEngineOutputDir="$(BuildEngineOutputDirectory)"
      CurrentDeviceName ="$(AdbTarget)"
    />-->
  </Target>

  <!-- For MonoTouch executable projects, we redefine the target SetMtouchExtraArgs and add linking to both core and freetype native libraries
       Note: this target can be redefined to add link other libraries -->
  <Target Name="SetMtouchExtraArgs" Condition=" '$(SiliconStudioPlatform)' == 'iOS' and '$(OutputType)' == 'Exe'">
    <PropertyGroup>
      <MtouchExtraArgs>$(MtouchExtraArgs) --compiler=clang -cxx -gcc_flags "-L%24{ProjectDir}/source -lstdc++ -lcore -force_load %24{ProjectDir}/source/libcore.a -lfreetype -force_load %24{ProjectDir}/source/libfreetype.a"</MtouchExtraArgs>
    </PropertyGroup>
  </Target>
  
  <!-- For MonoTouch executable projects, we add a target that copies the paradox native libraries to link in the project root directory -->
  <PropertyGroup Condition=" '$(SiliconStudioPlatform)' == 'iOS' and '$(OutputType)' == 'Exe'">
    <BuildDependsOn>
      CopyParadoxNativeLibraries;
      $(BuildDependsOn);
    </BuildDependsOn>
  </PropertyGroup>

  <!-- Copy the libfreetype.a libraries to the project root directory for future native link.
       Note: this target is redefined in References.targets for user projects -->
  <Target Name="CopyParadoxNativeLibraries" Condition=" '$(SiliconStudioPlatform)' == 'iOS' and '$(OutputType)' == 'Exe'">
    <Copy SourceFiles="$(ParadoxDependenciesDir)freetype-2.5.3\$(SiliconStudioPlatform)\libfreetype.a" DestinationFolder="$(ProjectDir)"/>
  </Target>

</Project>