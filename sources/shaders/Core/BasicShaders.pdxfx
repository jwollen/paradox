// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
using SiliconStudio.Paradox.Effects.Data;
using SiliconStudio.Paradox.Effects;

namespace SiliconStudio.Paradox.Effects.Core
{
    /// <summary>
    /// Computes tessellation
    /// </summary>
    partial shader ParadoxTessellation
    {
        using params MaterialParameters;

        /*if (MaterialParameters.DisplacementMap != null)
        {
            mixin TessellationDisplacement<1, 0>;
            mixin compose tessellationDisplacement = MaterialParameters.DisplacementMap;
        }*/
    };

    /// <summary>
    /// Performs animation skinning (position, normal and tangent)
    /// </summary>
    partial shader ParadoxSkinning
    {
        using params MaterialParameters;

        if (MaterialParameters.HasSkinningPosition)
        {
            if (MaterialParameters.SkinningBones > MaterialParameters.SkinningMaxBones)
            {
                // TODO: We should use next power of two minus constant to limit shader permutations?
                MaterialParameters.SkinningMaxBones = MaterialParameters.SkinningBones;
            }
            mixin macro MaterialParameters.SkinningMaxBones;
            mixin TransformationSkinning;

            if (MaterialParameters.HasSkinningNormal)
            {
                if (MaterialParameters.NormalMap != null)
                    mixin TangentToViewSkinning;
                else
                    mixin NormalVSSkinning;

                mixin NormalSkinning;
            }

            if (MaterialParameters.HasSkinningTangent)
                mixin TangentSkinning;
        }
    };

    /// <summary>
    /// Creates a shader for shadow caster object.
    /// </summary>
    partial shader ParadoxShadowCast
    {
        using params LightingKeys;

        // cast shadow
        if (LightingKeys.CastShadows)
            mixin child ShadowMapCaster;
    };

    /// <summary>
    /// Performs vertex (from attribute) and normal (from attribute or normal map) transformation
    /// </summary>
    partial shader ParadoxBaseShader
    {
        using params MaterialParameters;
        using params BasicShadersParameters;

        mixin ShaderBase;
        mixin ShadingBase;
        mixin TransformationWAndVP;

        mixin PositionVSStream;

        if (MaterialParameters.NormalMap != null)
        {
            mixin NormalMapTexture;
            mixin compose normalMap = MaterialParameters.NormalMap;
        }
        else
        {
            mixin NormalVSStream;
        }
    };
}