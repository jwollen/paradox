// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Paradox Shader Mixin Code Generator.
// To generate it yourself, please install SiliconStudio.Paradox.VisualStudio.Package .vsix
// and re-save the associated .pdxfx.
// </auto-generated>

using System;
using SiliconStudio.Core;
using SiliconStudio.Paradox.Effects;
using SiliconStudio.Paradox.Graphics;
using SiliconStudio.Paradox.Shaders;
using SiliconStudio.Core.Mathematics;
using Buffer = SiliconStudio.Paradox.Graphics.Buffer;

using SiliconStudio.Paradox.Effects.Data;
using SiliconStudio.Paradox.Engine;
using SiliconStudio.Paradox.DataModel;
namespace DefaultEffects
{
    [DataContract]public partial class LightingParameters : ShaderMixinParameters
    {
        public static readonly ParameterKey<int> PerPixelDirectionalLightCount = ParameterKeys.New<int>();
        public static readonly ParameterKey<int> PerPixelDiffuseDirectionalLightCount = ParameterKeys.New<int>();
        public static readonly ParameterKey<int> PerVertexDirectionalLightCount = ParameterKeys.New<int>();
        public static readonly ParameterKey<int> PerVertexDiffusePixelSpecularDirectionalLightCount = ParameterKeys.New<int>();
    };
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxGBufferShaderPass  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.CloneParentMixinToCurrent();
                context.Mixin(mixin, "GBuffer");
                context.Mixin(mixin, "NormalVSStream");
                if (context.GetParam(MaterialParameters.SpecularPowerMap) != null)
                {
                    context.Mixin(mixin, "SpecularPower");

                    {
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                        context.PushComposition(mixin, "SpecularPowerMap", __subMixin);
                        context.Mixin(__subMixin, context.GetParam(MaterialParameters.SpecularPowerMap));
                        context.PopComposition();
                    }
                }
                if (context.GetParam(MaterialParameters.SpecularIntensityMap) != null)
                {

                    {
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                        context.PushComposition(mixin, "SpecularIntensityMap", __subMixin);
                        context.Mixin(__subMixin, context.GetParam(MaterialParameters.SpecularIntensityMap));
                        context.PopComposition();
                    }
                }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxGBufferShaderPass", new ParadoxGBufferShaderPass());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxGBufferPlugin  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {

                {
                    var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxGBufferShaderPass" };
                    context.BeginChild(__subMixin);
                    context.Mixin(__subMixin, "ParadoxGBufferShaderPass");
                    context.EndChild();
                }
                context.RemoveMixin(mixin, "NormalVSStream");
                context.RemoveMixin(mixin, "SpecularPowerMap");
                context.RemoveMixin(mixin, "SpecularPowerPerMesh");
                context.Mixin(mixin, "NormalVSGBuffer");
                context.Mixin(mixin, "SpecularPowerGBuffer");
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxGBufferPlugin", new ParadoxGBufferPlugin());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxDeferredLightingPointGroup  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                mixin.Mixin.AddMacro("DEFERRED_MAX_POINT_LIGHT_COUNT", context.GetParam(LightingKeys.MaxDeferredLights));
                context.Mixin(mixin, "DeferredPointLighting");
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxDeferredLightingPointGroup", new ParadoxDeferredLightingPointGroup());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class DeferredLightingDirectShadowGroup  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "DeferredDirectionalShadowLighting");
                context.Mixin(mixin, "ShadowMapCascadeBase");
                mixin.Mixin.AddMacro("SHADOWMAP_COUNT", 1);
                mixin.Mixin.AddMacro("SHADOWMAP_CASCADE_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));
                mixin.Mixin.AddMacro("SHADOWMAP_TOTAL_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));
                mixin.Mixin.AddMacro("HAS_DYNAMIC_SHADOWMAP_COUNT", 0);
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("DeferredLightingDirectShadowGroup", new DeferredLightingDirectShadowGroup());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class DeferredLightingSpotShadowGroup  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "DeferredSpotShadowLighting");
                context.Mixin(mixin, "ShadowMapCascadeBase");
                mixin.Mixin.AddMacro("SHADOWMAP_COUNT", 1);
                mixin.Mixin.AddMacro("SHADOWMAP_CASCADE_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));
                mixin.Mixin.AddMacro("SHADOWMAP_TOTAL_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));
                mixin.Mixin.AddMacro("HAS_DYNAMIC_SHADOWMAP_COUNT", 0);
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("DeferredLightingSpotShadowGroup", new DeferredLightingSpotShadowGroup());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class DeferredLightTypeGroup  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                if (context.GetParam(ShadowMapParameters.LightType) == LightType.Directional)
                    context.Mixin(mixin, "DeferredLightingDirectShadowGroup");
                else if (context.GetParam(ShadowMapParameters.LightType) == LightType.Spot)
                    context.Mixin(mixin, "DeferredLightingSpotShadowGroup");
                else
                    context.Mixin(mixin, "DeferredLightingDirectShadowGroup");
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("DeferredLightTypeGroup", new DeferredLightTypeGroup());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class NearestFilterGroup  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "DeferredLightTypeGroup");
                context.Mixin(mixin, "ShadowMapFilterDefault");
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("NearestFilterGroup", new NearestFilterGroup());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class PcfGroup  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "DeferredLightTypeGroup");
                context.Mixin(mixin, "ShadowMapFilterPcf");
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("PcfGroup", new PcfGroup());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class VsmGroup  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "DeferredLightTypeGroup");
                context.Mixin(mixin, "ShadowMapFilterVsm");
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("VsmGroup", new VsmGroup());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxShadowPrepassLighting  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.CloneParentMixinToCurrent();
                context.Mixin(mixin, "DeferredShadowLightingShader");
                if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.Nearest)

                    {
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                        context.PushCompositionArray(mixin, "shadows", __subMixin);
                        context.Mixin(__subMixin, "NearestFilterGroup");
                        context.PopComposition();
                    }
                else if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.PercentageCloserFiltering)

                    {
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                        context.PushCompositionArray(mixin, "shadows", __subMixin);
                        context.Mixin(__subMixin, "PcfGroup");
                        context.PopComposition();
                    }
                else if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.Variance)

                    {
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                        context.PushCompositionArray(mixin, "shadows", __subMixin);
                        context.Mixin(__subMixin, "VsmGroup");
                        context.PopComposition();
                    }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxShadowPrepassLighting", new ParadoxShadowPrepassLighting());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxDeferredLightingDirectGroup  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "DeferredDirectionalLighting");
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxDeferredLightingDirectGroup", new ParadoxDeferredLightingDirectGroup());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxDeferredLightingSpotGroup  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "DeferredSpotLighting");
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxDeferredLightingSpotGroup", new ParadoxDeferredLightingSpotGroup());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxDirectPrepassLighting  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.CloneParentMixinToCurrent();

                {
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                    context.PushCompositionArray(mixin, "lightingGroups", __subMixin);
                    context.Mixin(__subMixin, "ParadoxDeferredLightingDirectGroup");
                    context.PopComposition();
                }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxDirectPrepassLighting", new ParadoxDirectPrepassLighting());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxPointPrepassLighting  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.CloneParentMixinToCurrent();
                if (context.GetParam(LightingKeys.MaxDeferredLights) > 0)

                    {
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                        context.PushCompositionArray(mixin, "lightingGroups", __subMixin);
                        context.Mixin(__subMixin, "ParadoxDeferredLightingPointGroup");
                        context.PopComposition();
                    }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxPointPrepassLighting", new ParadoxPointPrepassLighting());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxSpotPrepassLighting  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.CloneParentMixinToCurrent();

                {
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                    context.PushCompositionArray(mixin, "lightingGroups", __subMixin);
                    context.Mixin(__subMixin, "ParadoxDeferredLightingSpotGroup");
                    context.PopComposition();
                }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxSpotPrepassLighting", new ParadoxSpotPrepassLighting());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxDeferredSpecular  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "ComputeBRDFColorSpecularBlinnPhong");
                context.Mixin(mixin, "SpecularPowerGBuffer");

                {
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                    context.PushComposition(mixin, "SpecularIntensityMap", __subMixin);
                    context.Mixin(__subMixin, "ComputeColorOne");
                    context.PopComposition();
                }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxDeferredSpecular", new ParadoxDeferredSpecular());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxDefaultLightPrepassEffect  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "PositionVSGBuffer");
                context.Mixin(mixin, "NormalVSGBuffer");
                context.Mixin(mixin, "BRDFDiffuseBase");
                context.Mixin(mixin, "BRDFSpecularBase");

                {
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                    context.PushComposition(mixin, "DiffuseColor", __subMixin);
                    context.Mixin(__subMixin, "ComputeBRDFColorFresnel");
                    context.PopComposition();
                }

                {
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                    context.PushComposition(mixin, "DiffuseLighting", __subMixin);
                    context.Mixin(__subMixin, "ComputeBRDFDiffuseLambert");
                    context.PopComposition();
                }

                {
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                    context.PushComposition(mixin, "SpecularColor", __subMixin);
                    context.Mixin(__subMixin, "ComputeBRDFColor");
                    context.PopComposition();
                }

                {
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                    context.PushComposition(mixin, "SpecularLighting", __subMixin);
                    context.Mixin(__subMixin, "ParadoxDeferredSpecular");
                    context.PopComposition();
                }

                {
                    var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxShadowPrepassLighting" };
                    context.BeginChild(__subMixin);
                    context.Mixin(__subMixin, "ParadoxShadowPrepassLighting");
                    context.EndChild();
                }
                context.Mixin(mixin, "DeferredLightingShader");

                {
                    var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxDirectPrepassLighting" };
                    context.BeginChild(__subMixin);
                    context.Mixin(__subMixin, "ParadoxDirectPrepassLighting");
                    context.EndChild();
                }

                {
                    var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxSpotPrepassLighting" };
                    context.BeginChild(__subMixin);
                    context.Mixin(__subMixin, "ParadoxSpotPrepassLighting");
                    context.EndChild();
                }

                {
                    var __subMixin = new ShaderMixinSourceTree() { Name = "ParadoxPointPrepassLighting" };
                    context.BeginChild(__subMixin);
                    context.Mixin(__subMixin, "ParadoxPointPrepassLighting");
                    context.EndChild();
                }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxDefaultLightPrepassEffect", new ParadoxDefaultLightPrepassEffect());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class DirectionalLightsShader  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                mixin.Mixin.AddMacro("LIGHTING_MAX_LIGHT_COUNT", context.GetParam(LightingKeys.MaxDirectionalLights));
                if (context.GetParam(LightingKeys.UnrollDirectionalLightLoop))
                    mixin.Mixin.AddMacro("LIGHTING_UNROLL_LOOP", true);
                if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffusePixel)
                {
                    context.Mixin(mixin, "ShadingDiffusePerPixel");
                }
                else if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffuseVertex)
                {
                    context.Mixin(mixin, "ShadingDiffusePerVertex");
                }
                else if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffuseSpecularPixel)
                {
                    context.Mixin(mixin, "ShadingDiffuseSpecularPerPixel");
                }
                else if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffuseVertexSpecularPixel)
                {
                    context.Mixin(mixin, "ShadingDiffusePerVertexSpecularPerPixel");
                }
                context.Mixin(mixin, "DirectionalShading");
                context.Mixin(mixin, "ShadingEyeNormalVS");
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("DirectionalLightsShader", new DirectionalLightsShader());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxDiffuseDeferred  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                if (context.GetParam(MaterialParameters.AlbedoDiffuse) != null)
                {

                    {
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                        context.PushComposition(mixin, "albedoDiffuse", __subMixin);
                        context.Mixin(__subMixin, context.GetParam(MaterialParameters.AlbedoDiffuse));
                        context.PopComposition();
                    }
                }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxDiffuseDeferred", new ParadoxDiffuseDeferred());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxSpecularDeferred  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                if (context.GetParam(MaterialParameters.AlbedoSpecular) != null)
                {

                    {
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                        context.PushComposition(mixin, "albedoSpecular", __subMixin);
                        context.Mixin(__subMixin, context.GetParam(MaterialParameters.AlbedoSpecular));
                        context.PopComposition();
                    }
                }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxSpecularDeferred", new ParadoxSpecularDeferred());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ParadoxDefaultDeferredShader  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "ParadoxBaseShader");
                context.Mixin(mixin, "ParadoxSkinning");
                context.Mixin(mixin, "ParadoxShadowCast");
                if (context.GetParam(RenderingParameters.UseDeferred) && !context.GetParam(MaterialParameters.UseTransparent))
                {
                    context.Mixin(mixin, "ParadoxGBufferPlugin");
                    context.Mixin(mixin, "LightDeferredShading");
                    context.Mixin(mixin, "ParadoxDiffuseDeferred");
                    context.Mixin(mixin, "ParadoxSpecularDeferred");
                    if (context.GetParam(MaterialParameters.AmbientMap) != null)
                    {
                        context.Mixin(mixin, "AmbientMapShading");

                        {
                            var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                            context.PushComposition(mixin, "AmbientMap", __subMixin);
                            context.Mixin(__subMixin, context.GetParam(MaterialParameters.AmbientMap));
                            context.PopComposition();
                        }
                    }
                }
                else
                {
                    context.Mixin(mixin, "ParadoxDiffuseForward");
                    context.Mixin(mixin, "ParadoxSpecularForward");
                    if (context.GetParam(MaterialParameters.AmbientMap) != null)
                    {
                        context.Mixin(mixin, "AmbientMapShading");

                        {
                            var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                            context.PushComposition(mixin, "AmbientMap", __subMixin);
                            context.Mixin(__subMixin, context.GetParam(MaterialParameters.AmbientMap));
                            context.PopComposition();
                        }
                    }
                    if (context.GetParam(MaterialParameters.UseTransparent))
                    {
                        context.Mixin(mixin, "TransparentShading");
                        context.Mixin(mixin, "DiscardTransparent");
                    }
                }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ParadoxDefaultDeferredShader", new ParadoxDefaultDeferredShader());
            }
        }
    }
}
