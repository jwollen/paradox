// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
using SiliconStudio.Paradox.Effects.Data;
using SiliconStudio.Paradox.Effects;
using SiliconStudio.Paradox.Engine;
using SiliconStudio.Paradox.DataModel;

namespace DefaultForward
{
    partial shader ParadoxLightingTypeShader
    {
        using params MaterialParameters;

        if (MaterialParameters.LightingType == MaterialLightingType.DiffusePixel)
        {
            mixin ShadingDiffusePerPixel;
        }
        else if (MaterialParameters.LightingType == MaterialLightingType.DiffuseVertex)
        {
            mixin ShadingDiffusePerVertex;
        }
        else if (MaterialParameters.LightingType == MaterialLightingType.DiffuseSpecularPixel)
        {
            mixin ShadingDiffuseSpecularPerPixel;
        }
        else if (MaterialParameters.LightingType == MaterialLightingType.DiffuseVertexSpecularPixel)
        {
            mixin ShadingDiffusePerVertexSpecularPerPixel;
        }
    };

    partial shader ParadoxPointLightsShader
    {
        using params LightingKeys;
        using params MaterialParameters;

        mixin macro LIGHTING_MAX_LIGHT_COUNT = LightingKeys.MaxPointLights;
        //if (LightingKeys.UnrollPointLightLoop)
        //    mixin macro LIGHTING_UNROLL_LOOP = true;

        mixin ParadoxLightingTypeShader;
        mixin PointShading;
        mixin ShadingEyeNormalVS;
    };

    partial shader ParadoxSpotLightsShader
    {
        using params LightingKeys;
        using params MaterialParameters;

        mixin macro LIGHTING_MAX_LIGHT_COUNT = LightingKeys.MaxSpotLights;
        //if (LightingKeys.UnrollSpotLightLoop)
        //    mixin macro LIGHTING_UNROLL_LOOP = true;

        mixin ParadoxLightingTypeShader;
        mixin SpotShading;
        mixin ShadingEyeNormalVS;
    };

    partial shader ParadoxDirectionalLightsShader
    {
        using params LightingKeys;
        using params MaterialParameters;
        using params ShadowMapParameters;

        mixin macro LIGHTING_MAX_LIGHT_COUNT = LightingKeys.MaxDirectionalLights;// - ShadowMapParameters.ShadowMapCount;
        //if (LightingKeys.UnrollDirectionalLightLoop)
        //    mixin macro LIGHTING_UNROLL_LOOP = true;

        mixin ParadoxLightingTypeShader;
        mixin DirectionalShading;
        mixin ShadingEyeNormalVS;
    };

    partial shader ParadoxDirectionalShadowLightsShader
    {
        using params LightingKeys;
        using params MaterialParameters;
        using params ShadowMapParameters;

        // lighting
        mixin macro LIGHTING_MAX_LIGHT_COUNT = ShadowMapParameters.ShadowMapCount;
        //mixin macro LIGHTING_UNROLL_LOOP = true;
        
        mixin ParadoxLightingTypeShader;
        mixin ShadingPerPixelShadow; // not correct since it can be per vertex. Only for tests
        mixin DirectionalShading;
        mixin ShadingEyeNormalVS;

        //shadows
        mixin ForwardShadowMapBase;
        mixin ShadowMapCascadeBase;

        mixin macro SHADOWMAP_COUNT = ShadowMapParameters.ShadowMapCount;
        mixin macro SHADOWMAP_CASCADE_COUNT = ShadowMapParameters.ShadowMapCascadeCount;
        mixin macro SHADOWMAP_TOTAL_COUNT = ShadowMapParameters.ShadowMapCount * ShadowMapParameters.ShadowMapCascadeCount;
        //mixin macro SHADOWMAP_DEBUG = 1;

        if (ShadowMapParameters.FilterType == ShadowMapFilterType.Nearest)
            mixin ShadowMapFilterDefault;
        else if (ShadowMapParameters.FilterType == ShadowMapFilterType.PercentageCloserFiltering)
            mixin ShadowMapFilterPcf;
        else if (ShadowMapParameters.FilterType == ShadowMapFilterType.Variance)
            mixin ShadowMapFilterVsm;
    };

    partial shader ParadoxSpotShadowLightsShader
    {
        using params LightingKeys;
        using params MaterialParameters;
        using params ShadowMapParameters;

        // lighting
        mixin macro LIGHTING_MAX_LIGHT_COUNT = ShadowMapParameters.ShadowMapCount;
        //mixin macro LIGHTING_UNROLL_LOOP = true;
        
        mixin ParadoxLightingTypeShader;
        mixin ShadingPerPixelShadow; // not correct since it can be per vertex. Only for tests
        mixin SpotShading;
        mixin ShadingEyeNormalVS;

        //shadows
        mixin ForwardShadowMapBase;
        mixin ShadowMapCascadeBase;

        mixin macro SHADOWMAP_COUNT = ShadowMapParameters.ShadowMapCount;
        mixin macro SHADOWMAP_CASCADE_COUNT = ShadowMapParameters.ShadowMapCascadeCount;
        mixin macro SHADOWMAP_TOTAL_COUNT = ShadowMapParameters.ShadowMapCount * ShadowMapParameters.ShadowMapCascadeCount;
        //mixin macro SHADOWMAP_DEBUG = 1;

        if (ShadowMapParameters.FilterType == ShadowMapFilterType.Nearest)
            mixin ShadowMapFilterDefault;
        else if (ShadowMapParameters.FilterType == ShadowMapFilterType.PercentageCloserFiltering)
            mixin ShadowMapFilterPcf;
        else if (ShadowMapParameters.FilterType == ShadowMapFilterType.Variance)
            mixin ShadowMapFilterVsm;
    };

    partial shader ParadoxDiffuseForward
    {
        using params MaterialParameters;
        using params LightingKeys;
        using params ShadowMapParameters;

        mixin BRDFDiffuseBase;
        mixin BRDFSpecularBase;
            
        if (MaterialParameters.AlbedoDiffuse != null)
        {
            mixin AlbedoDiffuseBase;
            mixin compose albedoDiffuse = MaterialParameters.AlbedoDiffuse;

            if (LightingKeys.MaxDirectionalLights > 0 || LightingKeys.MaxSpotLights > 0 || LightingKeys.MaxPointLights > 0 || (LightingKeys.ReceiveShadows && ShadowMapParameters.ShadowMaps != null && ShadowMapParameters.ShadowMaps.Length > 0))
            {
                if (LightingKeys.MaxDirectionalLights > 0 || LightingKeys.MaxSpotLights > 0 || LightingKeys.MaxPointLights > 0)
                {
                    mixin GroupShadingBase;

                    if (LightingKeys.MaxDirectionalLights > 0)
                        mixin compose ShadingGroups += ParadoxDirectionalLightsShader;
                    if (LightingKeys.MaxSpotLights > 0)
                        mixin compose ShadingGroups += ParadoxSpotLightsShader;
                    if (LightingKeys.MaxPointLights > 0)
                        mixin compose ShadingGroups += ParadoxPointLightsShader;
                }
                if (LightingKeys.ReceiveShadows && ShadowMapParameters.ShadowMaps != null && ShadowMapParameters.ShadowMaps.Length > 0)
                {
                    mixin ShadowMapReceiver;
                    foreach(params ShadowMapParameters.ShadowMaps)
                    {
                        if (ShadowMapParameters.LightType == LightType.Directional)
                            mixin compose shadows += ParadoxDirectionalShadowLightsShader;
                        else if (ShadowMapParameters.LightType == LightType.Spot)
                            mixin compose shadows += ParadoxSpotShadowLightsShader;
                    }
                }
                
                if (MaterialParameters.DiffuseModel == MaterialDiffuseModel.None || MaterialParameters.DiffuseModel == MaterialDiffuseModel.Lambert)
                {
                    mixin compose DiffuseLighting = ComputeBRDFDiffuseLambert;
                }
                else if (MaterialParameters.DiffuseModel == MaterialDiffuseModel.OrenNayar)
                {
                    mixin compose DiffuseLighting = ComputeBRDFDiffuseOrenNayar;
                }
            }
            else
            {
                mixin AlbedoFlatShading;
            }
        }
    };

    partial shader ParadoxSpecularLighting
    {
        using params MaterialParameters;

        if (MaterialParameters.SpecularModel == MaterialSpecularModel.None || MaterialParameters.SpecularModel == MaterialSpecularModel.Phong)
        {
            mixin ComputeBRDFColorSpecularPhong;
        }
        else if (MaterialParameters.SpecularModel == MaterialSpecularModel.BlinnPhong)
        {
            mixin ComputeBRDFColorSpecularBlinnPhong;
        }
        else if (MaterialParameters.SpecularModel == MaterialSpecularModel.CookTorrance)
        {
            mixin ComputeBRDFColorSpecularCookTorrance;
        }

        // TODO: default behavior is Phong or no specular?

        if (MaterialParameters.SpecularPowerMap != null)
        {
            mixin SpecularPower;
            mixin compose SpecularPowerMap = MaterialParameters.SpecularPowerMap;
        }

        if (MaterialParameters.SpecularIntensityMap != null)
        {
            mixin compose SpecularIntensityMap = MaterialParameters.SpecularIntensityMap;
        }
    };

    partial shader ParadoxSpecularForward
    {
        using params MaterialParameters;
        using params MaterialKeys;

        mixin BRDFDiffuseBase;
        mixin BRDFSpecularBase;
        
        if (MaterialParameters.AlbedoSpecular != null)
        {
            mixin AlbedoSpecularBase;
            mixin compose albedoSpecular = MaterialParameters.AlbedoSpecular;
            mixin compose SpecularLighting = ParadoxSpecularLighting;
        }
    };

    shader ParadoxDefaultForwardShader
    {
        using params MaterialParameters;

        mixin ParadoxBaseShader;
        
        mixin ParadoxSkinning;

        mixin ParadoxShadowCast;

        mixin ParadoxDiffuseForward;
        mixin ParadoxSpecularForward;

        if (MaterialParameters.AmbientMap != null)
        {
            mixin AmbientMapShading;
            mixin compose AmbientMap = MaterialParameters.AmbientMap;
        }

        if (MaterialParameters.UseTransparentMask)
        {
            mixin TransparentShading;
            mixin DiscardTransparentThreshold<MaterialParameters.AlphaDiscardThreshold>;
        }
        else if (MaterialParameters.UseTransparent)
        {
            mixin TransparentShading;
            mixin DiscardTransparent;
        }
    };
}