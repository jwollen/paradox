// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
namespace SiliconStudio.Paradox.Effects.ShadowMaps
{
    /// <summary>
    /// Creates shadow map (just writing into the depth buffer).
    /// </summary>
    class ShadowMapCasterBase : Transformation, ShaderBase, PositionStream
    {
        cbuffer PerPass
        {
            [Link("Light.LightDirection")] 
            stage float3 shadowLightDirection;

            [Link("ShadowMap.LightOffset")] 
            stage float3 shadowLightOffset;

            [Link("ShadowMap.DistanceMax")]
            stage float ShadowMapDistance;
        };

        /// --------------------------------------------------------------------------------
        /// Vertex Shader
        /// --------------------------------------------------------------------------------
        override stage void VSMain()
        {
            base.VSMain();
            float4 vPositionWS = mul(streams.Position, World);
            // For each cascade, adjust Z position according to the light offset, then project along the light.
            // linear depth
            streams.ShadingPosition.z = streams.ShadingPosition.w * dot(shadowLightDirection, vPositionWS.xyz - shadowLightOffset) / ShadowMapDistance;
        }
    
        /// --------------------------------------------------------------------------------
        /// Pixel Shader
        /// --------------------------------------------------------------------------------
        override stage void PSMain()
        {
            // no code = null pixel shader
        }
    };
}