// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Paradox Shader Mixin Code Generator.
// To generate it yourself, please install SiliconStudio.Paradox.VisualStudio.Package .vsix
// and re-save the associated .pdxfx.
// </auto-generated>

using System;
using SiliconStudio.Core;
using SiliconStudio.Paradox.Effects;
using SiliconStudio.Paradox.Graphics;
using SiliconStudio.Paradox.Shaders;
using SiliconStudio.Core.Mathematics;
using Buffer = SiliconStudio.Paradox.Graphics.Buffer;

namespace SiliconStudio.Paradox.Effects.Images
{
    internal static partial class ShaderMixins
    {
        internal partial class ColorTransformCompose  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                if (context.GetParam(ColorTransformKeys.Enabled))
                {
                    context.Mixin(mixin, context.GetParam(ColorTransformKeys.Shader));
                }
                else
                {
                    context.Mixin(mixin, "ColorTransformShader");
                }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ColorTransformCompose", new ColorTransformCompose());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class ColorTransformGroupEffect  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "ColorTransformGroupShader");
                foreach(var colorTransform in context.GetParam(ColorTransformGroupKeys.Transforms))

                {

                    {
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };
                        context.PushCompositionArray(mixin, "Transforms", __subMixin);
                        context.Mixin(__subMixin, "ColorTransformCompose");
                        context.PopComposition();
                    }
                }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ColorTransformGroupEffect", new ColorTransformGroupEffect());
            }
        }
    }
}
