#!/bin/bash

# Define script constants
MAKEFILE=Makefile
INSTALL_DIR_IOS=bin/iOS
ASSEMBLY_NAME=libcore
SDK_VERSION=8.3
IPHONE_DEPLOY_TARGET=5.0
IPHONE_PLATFORM_DIR="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer"
SIMULATOR_PLATFORM_DIR="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer"


function BuildAndInstall
{
   #define function variables
   ARCHI=$1

   #clear and redefine build flags
   unset CFLAGS CC LDFLAGS MAIN_NAME INSTALL_DIR AR
   export AR=ar
   export CC=clang
   export CFLAGS="-arch $ARCHI -Os -g0 -c -DPLATFORM_IOS -stdlib=libc++"
   export LDFLAGS="-arch $ARCHI -static"
   export MAIN_NAME=$ASSEMBLY_NAME-$ARCHI.a
   export INSTALL_DIR=$INSTALL_DIR_IOS

   export CFLAGS="$CFLAGS -fmessage-length=0 -fdiagnostics-show-note-include-stack -fmacro-backtrace-limit=0 -Wno-trigraphs -fpascal-strings -Wno-missing-field-initializers -Wno-missing-prototypes -Wno-return-type -Wno-missing-braces -Wparentheses -Wswitch -Wno-unused-function -Wno-unused-label -Wno-unused-parameter -Wno-unused-variable -Wunused-value -Wno-empty-body -Wno-uninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wno-constant-conversion -Wno-int-conversion -Wno-bool-conversion -Wno-enum-conversion -Wno-shorten-64-to-32 -Wpointer-sign -Wno-newline-eof -DFT2_BUILD_LIBRARY=1 -DDARWIN_NO_CARBON -fstrict-aliasing -Wdeprecated-declarations -Wno-sign-conversion -Wextra -Wall  -MMD"

   if [[ $ARCHI == arm* ]]; then
      SDK_DIR="$IPHONE_PLATFORM_DIR/SDKs/iPhoneOS$SDK_VERSION.sdk"
      export CFLAGS="$CFLAGS -miphoneos-version-min=$IPHONE_DEPLOY_TARGET"
      export LDFLAGS="$LDFLAGS -miphoneos-version-min=$IPHONE_DEPLOY_TARGET"
   else
      SDK_DIR="$SIMULATOR_PLATFORM_DIR/SDKs/iPhoneSimulator$SDK_VERSION.sdk"
      export CFLAGS="$CFLAGS -mios-simulator-version-min=$IPHONE_DEPLOY_TARGET"
      export LDFLAGS="$LDFLAGS -mios-simulator-version-min=$IPHONE_DEPLOY_TARGET"
   fi

   export CFLAGS="$CFLAGS -isysroot $SDK_DIR"
   export AR="$IPHONE_PLATFORM_DIR/usr/bin/ar"
   export LDFLAGS="$LDFLAGS -isysroot $SDK_DIR/"

OUTPUT_LIB_NAME=

   # Perform the build and install it
   make -f $MAKEFILE clean
   make -f $MAKEFILE $MAIN_NAME
   make -f $MAKEFILE install
}

# emulator
BuildAndInstall i386 
BuildAndInstall x86_64
# iphone
#BuildAndInstall armv6 #current version of xCode does not support armv6 anymore. Need to re-install old version of Xcode if we want to compile it for armv6
BuildAndInstall armv7 
BuildAndInstall armv7s
BuildAndInstall arm64 

# Combine together the different versions of library into a single ".a" file
echo "cd $INSTALL_DIR_IOS"
cd $INSTALL_DIR_IOS
lipo -create -output $ASSEMBLY_NAME.a $ASSEMBLY_NAME-*

# Note: in case of problem here are the name of two tools that can be very usefull to analyze the generated assemblies
# 1. nm     -> display symbol table
# 2. otool  -> O-Mach analyzer / disassembler

# To add log in iOS native code:
# 1. add "-x objective-c++" in CFLAGS
# 2. add #import <Foundation/Foundation.h>
# 3. use NSLog(@"My log message");
